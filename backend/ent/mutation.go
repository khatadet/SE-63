// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/PON/app/ent/abilitypatientrights"
	"github.com/PON/app/ent/insurance"
	"github.com/PON/app/ent/medicalrecordstaff"
	"github.com/PON/app/ent/patientrecord"
	"github.com/PON/app/ent/patientrights"
	"github.com/PON/app/ent/patientrightstype"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAbilitypatientrights = "Abilitypatientrights"
	TypeInsurance            = "Insurance"
	TypeMedicalrecordstaff   = "Medicalrecordstaff"
	TypePatientrecord        = "Patientrecord"
	TypePatientrights        = "Patientrights"
	TypePatientrightstype    = "Patientrightstype"
)

// AbilitypatientrightsMutation represents an operation that mutate the AbilitypatientrightsSlice
// nodes in the graph.
type AbilitypatientrightsMutation struct {
	config
	op                                            Op
	typ                                           string
	id                                            *int
	_Operative                                    *string
	_MedicalSupplies                              *string
	_Examine                                      *string
	clearedFields                                 map[string]struct{}
	_AbilitypatientrightsPatientrightstype        map[int]struct{}
	removed_AbilitypatientrightsPatientrightstype map[int]struct{}
	done                                          bool
	oldValue                                      func(context.Context) (*Abilitypatientrights, error)
}

var _ ent.Mutation = (*AbilitypatientrightsMutation)(nil)

// abilitypatientrightsOption allows to manage the mutation configuration using functional options.
type abilitypatientrightsOption func(*AbilitypatientrightsMutation)

// newAbilitypatientrightsMutation creates new mutation for $n.Name.
func newAbilitypatientrightsMutation(c config, op Op, opts ...abilitypatientrightsOption) *AbilitypatientrightsMutation {
	m := &AbilitypatientrightsMutation{
		config:        c,
		op:            op,
		typ:           TypeAbilitypatientrights,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAbilitypatientrightsID sets the id field of the mutation.
func withAbilitypatientrightsID(id int) abilitypatientrightsOption {
	return func(m *AbilitypatientrightsMutation) {
		var (
			err   error
			once  sync.Once
			value *Abilitypatientrights
		)
		m.oldValue = func(ctx context.Context) (*Abilitypatientrights, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Abilitypatientrights.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAbilitypatientrights sets the old Abilitypatientrights of the mutation.
func withAbilitypatientrights(node *Abilitypatientrights) abilitypatientrightsOption {
	return func(m *AbilitypatientrightsMutation) {
		m.oldValue = func(context.Context) (*Abilitypatientrights, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AbilitypatientrightsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AbilitypatientrightsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *AbilitypatientrightsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetOperative sets the Operative field.
func (m *AbilitypatientrightsMutation) SetOperative(s string) {
	m._Operative = &s
}

// Operative returns the Operative value in the mutation.
func (m *AbilitypatientrightsMutation) Operative() (r string, exists bool) {
	v := m._Operative
	if v == nil {
		return
	}
	return *v, true
}

// OldOperative returns the old Operative value of the Abilitypatientrights.
// If the Abilitypatientrights object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *AbilitypatientrightsMutation) OldOperative(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOperative is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOperative requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOperative: %w", err)
	}
	return oldValue.Operative, nil
}

// ResetOperative reset all changes of the "Operative" field.
func (m *AbilitypatientrightsMutation) ResetOperative() {
	m._Operative = nil
}

// SetMedicalSupplies sets the MedicalSupplies field.
func (m *AbilitypatientrightsMutation) SetMedicalSupplies(s string) {
	m._MedicalSupplies = &s
}

// MedicalSupplies returns the MedicalSupplies value in the mutation.
func (m *AbilitypatientrightsMutation) MedicalSupplies() (r string, exists bool) {
	v := m._MedicalSupplies
	if v == nil {
		return
	}
	return *v, true
}

// OldMedicalSupplies returns the old MedicalSupplies value of the Abilitypatientrights.
// If the Abilitypatientrights object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *AbilitypatientrightsMutation) OldMedicalSupplies(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMedicalSupplies is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMedicalSupplies requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMedicalSupplies: %w", err)
	}
	return oldValue.MedicalSupplies, nil
}

// ResetMedicalSupplies reset all changes of the "MedicalSupplies" field.
func (m *AbilitypatientrightsMutation) ResetMedicalSupplies() {
	m._MedicalSupplies = nil
}

// SetExamine sets the Examine field.
func (m *AbilitypatientrightsMutation) SetExamine(s string) {
	m._Examine = &s
}

// Examine returns the Examine value in the mutation.
func (m *AbilitypatientrightsMutation) Examine() (r string, exists bool) {
	v := m._Examine
	if v == nil {
		return
	}
	return *v, true
}

// OldExamine returns the old Examine value of the Abilitypatientrights.
// If the Abilitypatientrights object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *AbilitypatientrightsMutation) OldExamine(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldExamine is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldExamine requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExamine: %w", err)
	}
	return oldValue.Examine, nil
}

// ResetExamine reset all changes of the "Examine" field.
func (m *AbilitypatientrightsMutation) ResetExamine() {
	m._Examine = nil
}

// AddAbilitypatientrightsPatientrightstypeIDs adds the AbilitypatientrightsPatientrightstype edge to Patientrightstype by ids.
func (m *AbilitypatientrightsMutation) AddAbilitypatientrightsPatientrightstypeIDs(ids ...int) {
	if m._AbilitypatientrightsPatientrightstype == nil {
		m._AbilitypatientrightsPatientrightstype = make(map[int]struct{})
	}
	for i := range ids {
		m._AbilitypatientrightsPatientrightstype[ids[i]] = struct{}{}
	}
}

// RemoveAbilitypatientrightsPatientrightstypeIDs removes the AbilitypatientrightsPatientrightstype edge to Patientrightstype by ids.
func (m *AbilitypatientrightsMutation) RemoveAbilitypatientrightsPatientrightstypeIDs(ids ...int) {
	if m.removed_AbilitypatientrightsPatientrightstype == nil {
		m.removed_AbilitypatientrightsPatientrightstype = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_AbilitypatientrightsPatientrightstype[ids[i]] = struct{}{}
	}
}

// RemovedAbilitypatientrightsPatientrightstype returns the removed ids of AbilitypatientrightsPatientrightstype.
func (m *AbilitypatientrightsMutation) RemovedAbilitypatientrightsPatientrightstypeIDs() (ids []int) {
	for id := range m.removed_AbilitypatientrightsPatientrightstype {
		ids = append(ids, id)
	}
	return
}

// AbilitypatientrightsPatientrightstypeIDs returns the AbilitypatientrightsPatientrightstype ids in the mutation.
func (m *AbilitypatientrightsMutation) AbilitypatientrightsPatientrightstypeIDs() (ids []int) {
	for id := range m._AbilitypatientrightsPatientrightstype {
		ids = append(ids, id)
	}
	return
}

// ResetAbilitypatientrightsPatientrightstype reset all changes of the "AbilitypatientrightsPatientrightstype" edge.
func (m *AbilitypatientrightsMutation) ResetAbilitypatientrightsPatientrightstype() {
	m._AbilitypatientrightsPatientrightstype = nil
	m.removed_AbilitypatientrightsPatientrightstype = nil
}

// Op returns the operation name.
func (m *AbilitypatientrightsMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Abilitypatientrights).
func (m *AbilitypatientrightsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *AbilitypatientrightsMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._Operative != nil {
		fields = append(fields, abilitypatientrights.FieldOperative)
	}
	if m._MedicalSupplies != nil {
		fields = append(fields, abilitypatientrights.FieldMedicalSupplies)
	}
	if m._Examine != nil {
		fields = append(fields, abilitypatientrights.FieldExamine)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *AbilitypatientrightsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case abilitypatientrights.FieldOperative:
		return m.Operative()
	case abilitypatientrights.FieldMedicalSupplies:
		return m.MedicalSupplies()
	case abilitypatientrights.FieldExamine:
		return m.Examine()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *AbilitypatientrightsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case abilitypatientrights.FieldOperative:
		return m.OldOperative(ctx)
	case abilitypatientrights.FieldMedicalSupplies:
		return m.OldMedicalSupplies(ctx)
	case abilitypatientrights.FieldExamine:
		return m.OldExamine(ctx)
	}
	return nil, fmt.Errorf("unknown Abilitypatientrights field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *AbilitypatientrightsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case abilitypatientrights.FieldOperative:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOperative(v)
		return nil
	case abilitypatientrights.FieldMedicalSupplies:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMedicalSupplies(v)
		return nil
	case abilitypatientrights.FieldExamine:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExamine(v)
		return nil
	}
	return fmt.Errorf("unknown Abilitypatientrights field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *AbilitypatientrightsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *AbilitypatientrightsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *AbilitypatientrightsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Abilitypatientrights numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *AbilitypatientrightsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *AbilitypatientrightsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *AbilitypatientrightsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Abilitypatientrights nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *AbilitypatientrightsMutation) ResetField(name string) error {
	switch name {
	case abilitypatientrights.FieldOperative:
		m.ResetOperative()
		return nil
	case abilitypatientrights.FieldMedicalSupplies:
		m.ResetMedicalSupplies()
		return nil
	case abilitypatientrights.FieldExamine:
		m.ResetExamine()
		return nil
	}
	return fmt.Errorf("unknown Abilitypatientrights field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *AbilitypatientrightsMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._AbilitypatientrightsPatientrightstype != nil {
		edges = append(edges, abilitypatientrights.EdgeAbilitypatientrightsPatientrightstype)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *AbilitypatientrightsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case abilitypatientrights.EdgeAbilitypatientrightsPatientrightstype:
		ids := make([]ent.Value, 0, len(m._AbilitypatientrightsPatientrightstype))
		for id := range m._AbilitypatientrightsPatientrightstype {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *AbilitypatientrightsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_AbilitypatientrightsPatientrightstype != nil {
		edges = append(edges, abilitypatientrights.EdgeAbilitypatientrightsPatientrightstype)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *AbilitypatientrightsMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case abilitypatientrights.EdgeAbilitypatientrightsPatientrightstype:
		ids := make([]ent.Value, 0, len(m.removed_AbilitypatientrightsPatientrightstype))
		for id := range m.removed_AbilitypatientrightsPatientrightstype {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *AbilitypatientrightsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *AbilitypatientrightsMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *AbilitypatientrightsMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Abilitypatientrights unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *AbilitypatientrightsMutation) ResetEdge(name string) error {
	switch name {
	case abilitypatientrights.EdgeAbilitypatientrightsPatientrightstype:
		m.ResetAbilitypatientrightsPatientrightstype()
		return nil
	}
	return fmt.Errorf("unknown Abilitypatientrights edge %s", name)
}

// InsuranceMutation represents an operation that mutate the Insurances
// nodes in the graph.
type InsuranceMutation struct {
	config
	op                             Op
	typ                            string
	id                             *int
	_Insurancecompany              *string
	clearedFields                  map[string]struct{}
	_InsurancePatientrights        map[int]struct{}
	removed_InsurancePatientrights map[int]struct{}
	done                           bool
	oldValue                       func(context.Context) (*Insurance, error)
}

var _ ent.Mutation = (*InsuranceMutation)(nil)

// insuranceOption allows to manage the mutation configuration using functional options.
type insuranceOption func(*InsuranceMutation)

// newInsuranceMutation creates new mutation for $n.Name.
func newInsuranceMutation(c config, op Op, opts ...insuranceOption) *InsuranceMutation {
	m := &InsuranceMutation{
		config:        c,
		op:            op,
		typ:           TypeInsurance,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withInsuranceID sets the id field of the mutation.
func withInsuranceID(id int) insuranceOption {
	return func(m *InsuranceMutation) {
		var (
			err   error
			once  sync.Once
			value *Insurance
		)
		m.oldValue = func(ctx context.Context) (*Insurance, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Insurance.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withInsurance sets the old Insurance of the mutation.
func withInsurance(node *Insurance) insuranceOption {
	return func(m *InsuranceMutation) {
		m.oldValue = func(context.Context) (*Insurance, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m InsuranceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m InsuranceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *InsuranceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetInsurancecompany sets the Insurancecompany field.
func (m *InsuranceMutation) SetInsurancecompany(s string) {
	m._Insurancecompany = &s
}

// Insurancecompany returns the Insurancecompany value in the mutation.
func (m *InsuranceMutation) Insurancecompany() (r string, exists bool) {
	v := m._Insurancecompany
	if v == nil {
		return
	}
	return *v, true
}

// OldInsurancecompany returns the old Insurancecompany value of the Insurance.
// If the Insurance object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *InsuranceMutation) OldInsurancecompany(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldInsurancecompany is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldInsurancecompany requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInsurancecompany: %w", err)
	}
	return oldValue.Insurancecompany, nil
}

// ResetInsurancecompany reset all changes of the "Insurancecompany" field.
func (m *InsuranceMutation) ResetInsurancecompany() {
	m._Insurancecompany = nil
}

// AddInsurancePatientrightIDs adds the InsurancePatientrights edge to Patientrights by ids.
func (m *InsuranceMutation) AddInsurancePatientrightIDs(ids ...int) {
	if m._InsurancePatientrights == nil {
		m._InsurancePatientrights = make(map[int]struct{})
	}
	for i := range ids {
		m._InsurancePatientrights[ids[i]] = struct{}{}
	}
}

// RemoveInsurancePatientrightIDs removes the InsurancePatientrights edge to Patientrights by ids.
func (m *InsuranceMutation) RemoveInsurancePatientrightIDs(ids ...int) {
	if m.removed_InsurancePatientrights == nil {
		m.removed_InsurancePatientrights = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_InsurancePatientrights[ids[i]] = struct{}{}
	}
}

// RemovedInsurancePatientrights returns the removed ids of InsurancePatientrights.
func (m *InsuranceMutation) RemovedInsurancePatientrightsIDs() (ids []int) {
	for id := range m.removed_InsurancePatientrights {
		ids = append(ids, id)
	}
	return
}

// InsurancePatientrightsIDs returns the InsurancePatientrights ids in the mutation.
func (m *InsuranceMutation) InsurancePatientrightsIDs() (ids []int) {
	for id := range m._InsurancePatientrights {
		ids = append(ids, id)
	}
	return
}

// ResetInsurancePatientrights reset all changes of the "InsurancePatientrights" edge.
func (m *InsuranceMutation) ResetInsurancePatientrights() {
	m._InsurancePatientrights = nil
	m.removed_InsurancePatientrights = nil
}

// Op returns the operation name.
func (m *InsuranceMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Insurance).
func (m *InsuranceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *InsuranceMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Insurancecompany != nil {
		fields = append(fields, insurance.FieldInsurancecompany)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *InsuranceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case insurance.FieldInsurancecompany:
		return m.Insurancecompany()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *InsuranceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case insurance.FieldInsurancecompany:
		return m.OldInsurancecompany(ctx)
	}
	return nil, fmt.Errorf("unknown Insurance field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *InsuranceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case insurance.FieldInsurancecompany:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInsurancecompany(v)
		return nil
	}
	return fmt.Errorf("unknown Insurance field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *InsuranceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *InsuranceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *InsuranceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Insurance numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *InsuranceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *InsuranceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *InsuranceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Insurance nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *InsuranceMutation) ResetField(name string) error {
	switch name {
	case insurance.FieldInsurancecompany:
		m.ResetInsurancecompany()
		return nil
	}
	return fmt.Errorf("unknown Insurance field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *InsuranceMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._InsurancePatientrights != nil {
		edges = append(edges, insurance.EdgeInsurancePatientrights)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *InsuranceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case insurance.EdgeInsurancePatientrights:
		ids := make([]ent.Value, 0, len(m._InsurancePatientrights))
		for id := range m._InsurancePatientrights {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *InsuranceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_InsurancePatientrights != nil {
		edges = append(edges, insurance.EdgeInsurancePatientrights)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *InsuranceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case insurance.EdgeInsurancePatientrights:
		ids := make([]ent.Value, 0, len(m.removed_InsurancePatientrights))
		for id := range m.removed_InsurancePatientrights {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *InsuranceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *InsuranceMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *InsuranceMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Insurance unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *InsuranceMutation) ResetEdge(name string) error {
	switch name {
	case insurance.EdgeInsurancePatientrights:
		m.ResetInsurancePatientrights()
		return nil
	}
	return fmt.Errorf("unknown Insurance edge %s", name)
}

// MedicalrecordstaffMutation represents an operation that mutate the Medicalrecordstaffs
// nodes in the graph.
type MedicalrecordstaffMutation struct {
	config
	op                                      Op
	typ                                     string
	id                                      *int
	clearedFields                           map[string]struct{}
	_MedicalrecordstaffPatientrights        map[int]struct{}
	removed_MedicalrecordstaffPatientrights map[int]struct{}
	done                                    bool
	oldValue                                func(context.Context) (*Medicalrecordstaff, error)
}

var _ ent.Mutation = (*MedicalrecordstaffMutation)(nil)

// medicalrecordstaffOption allows to manage the mutation configuration using functional options.
type medicalrecordstaffOption func(*MedicalrecordstaffMutation)

// newMedicalrecordstaffMutation creates new mutation for $n.Name.
func newMedicalrecordstaffMutation(c config, op Op, opts ...medicalrecordstaffOption) *MedicalrecordstaffMutation {
	m := &MedicalrecordstaffMutation{
		config:        c,
		op:            op,
		typ:           TypeMedicalrecordstaff,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMedicalrecordstaffID sets the id field of the mutation.
func withMedicalrecordstaffID(id int) medicalrecordstaffOption {
	return func(m *MedicalrecordstaffMutation) {
		var (
			err   error
			once  sync.Once
			value *Medicalrecordstaff
		)
		m.oldValue = func(ctx context.Context) (*Medicalrecordstaff, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Medicalrecordstaff.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMedicalrecordstaff sets the old Medicalrecordstaff of the mutation.
func withMedicalrecordstaff(node *Medicalrecordstaff) medicalrecordstaffOption {
	return func(m *MedicalrecordstaffMutation) {
		m.oldValue = func(context.Context) (*Medicalrecordstaff, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MedicalrecordstaffMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MedicalrecordstaffMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *MedicalrecordstaffMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// AddMedicalrecordstaffPatientrightIDs adds the MedicalrecordstaffPatientrights edge to Patientrights by ids.
func (m *MedicalrecordstaffMutation) AddMedicalrecordstaffPatientrightIDs(ids ...int) {
	if m._MedicalrecordstaffPatientrights == nil {
		m._MedicalrecordstaffPatientrights = make(map[int]struct{})
	}
	for i := range ids {
		m._MedicalrecordstaffPatientrights[ids[i]] = struct{}{}
	}
}

// RemoveMedicalrecordstaffPatientrightIDs removes the MedicalrecordstaffPatientrights edge to Patientrights by ids.
func (m *MedicalrecordstaffMutation) RemoveMedicalrecordstaffPatientrightIDs(ids ...int) {
	if m.removed_MedicalrecordstaffPatientrights == nil {
		m.removed_MedicalrecordstaffPatientrights = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_MedicalrecordstaffPatientrights[ids[i]] = struct{}{}
	}
}

// RemovedMedicalrecordstaffPatientrights returns the removed ids of MedicalrecordstaffPatientrights.
func (m *MedicalrecordstaffMutation) RemovedMedicalrecordstaffPatientrightsIDs() (ids []int) {
	for id := range m.removed_MedicalrecordstaffPatientrights {
		ids = append(ids, id)
	}
	return
}

// MedicalrecordstaffPatientrightsIDs returns the MedicalrecordstaffPatientrights ids in the mutation.
func (m *MedicalrecordstaffMutation) MedicalrecordstaffPatientrightsIDs() (ids []int) {
	for id := range m._MedicalrecordstaffPatientrights {
		ids = append(ids, id)
	}
	return
}

// ResetMedicalrecordstaffPatientrights reset all changes of the "MedicalrecordstaffPatientrights" edge.
func (m *MedicalrecordstaffMutation) ResetMedicalrecordstaffPatientrights() {
	m._MedicalrecordstaffPatientrights = nil
	m.removed_MedicalrecordstaffPatientrights = nil
}

// Op returns the operation name.
func (m *MedicalrecordstaffMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Medicalrecordstaff).
func (m *MedicalrecordstaffMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *MedicalrecordstaffMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *MedicalrecordstaffMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *MedicalrecordstaffMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown Medicalrecordstaff field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MedicalrecordstaffMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Medicalrecordstaff field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *MedicalrecordstaffMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *MedicalrecordstaffMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MedicalrecordstaffMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown Medicalrecordstaff numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *MedicalrecordstaffMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *MedicalrecordstaffMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *MedicalrecordstaffMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Medicalrecordstaff nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *MedicalrecordstaffMutation) ResetField(name string) error {
	return fmt.Errorf("unknown Medicalrecordstaff field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *MedicalrecordstaffMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._MedicalrecordstaffPatientrights != nil {
		edges = append(edges, medicalrecordstaff.EdgeMedicalrecordstaffPatientrights)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *MedicalrecordstaffMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case medicalrecordstaff.EdgeMedicalrecordstaffPatientrights:
		ids := make([]ent.Value, 0, len(m._MedicalrecordstaffPatientrights))
		for id := range m._MedicalrecordstaffPatientrights {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *MedicalrecordstaffMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_MedicalrecordstaffPatientrights != nil {
		edges = append(edges, medicalrecordstaff.EdgeMedicalrecordstaffPatientrights)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *MedicalrecordstaffMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case medicalrecordstaff.EdgeMedicalrecordstaffPatientrights:
		ids := make([]ent.Value, 0, len(m.removed_MedicalrecordstaffPatientrights))
		for id := range m.removed_MedicalrecordstaffPatientrights {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *MedicalrecordstaffMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *MedicalrecordstaffMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *MedicalrecordstaffMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Medicalrecordstaff unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *MedicalrecordstaffMutation) ResetEdge(name string) error {
	switch name {
	case medicalrecordstaff.EdgeMedicalrecordstaffPatientrights:
		m.ResetMedicalrecordstaffPatientrights()
		return nil
	}
	return fmt.Errorf("unknown Medicalrecordstaff edge %s", name)
}

// PatientrecordMutation represents an operation that mutate the Patientrecords
// nodes in the graph.
type PatientrecordMutation struct {
	config
	op                                 Op
	typ                                string
	id                                 *int
	_Name                              *string
	clearedFields                      map[string]struct{}
	_PatientrecordPatientrights        map[int]struct{}
	removed_PatientrecordPatientrights map[int]struct{}
	done                               bool
	oldValue                           func(context.Context) (*Patientrecord, error)
}

var _ ent.Mutation = (*PatientrecordMutation)(nil)

// patientrecordOption allows to manage the mutation configuration using functional options.
type patientrecordOption func(*PatientrecordMutation)

// newPatientrecordMutation creates new mutation for $n.Name.
func newPatientrecordMutation(c config, op Op, opts ...patientrecordOption) *PatientrecordMutation {
	m := &PatientrecordMutation{
		config:        c,
		op:            op,
		typ:           TypePatientrecord,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPatientrecordID sets the id field of the mutation.
func withPatientrecordID(id int) patientrecordOption {
	return func(m *PatientrecordMutation) {
		var (
			err   error
			once  sync.Once
			value *Patientrecord
		)
		m.oldValue = func(ctx context.Context) (*Patientrecord, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Patientrecord.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPatientrecord sets the old Patientrecord of the mutation.
func withPatientrecord(node *Patientrecord) patientrecordOption {
	return func(m *PatientrecordMutation) {
		m.oldValue = func(context.Context) (*Patientrecord, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PatientrecordMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PatientrecordMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PatientrecordMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the Name field.
func (m *PatientrecordMutation) SetName(s string) {
	m._Name = &s
}

// Name returns the Name value in the mutation.
func (m *PatientrecordMutation) Name() (r string, exists bool) {
	v := m._Name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old Name value of the Patientrecord.
// If the Patientrecord object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientrecordMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "Name" field.
func (m *PatientrecordMutation) ResetName() {
	m._Name = nil
}

// AddPatientrecordPatientrightIDs adds the PatientrecordPatientrights edge to Patientrights by ids.
func (m *PatientrecordMutation) AddPatientrecordPatientrightIDs(ids ...int) {
	if m._PatientrecordPatientrights == nil {
		m._PatientrecordPatientrights = make(map[int]struct{})
	}
	for i := range ids {
		m._PatientrecordPatientrights[ids[i]] = struct{}{}
	}
}

// RemovePatientrecordPatientrightIDs removes the PatientrecordPatientrights edge to Patientrights by ids.
func (m *PatientrecordMutation) RemovePatientrecordPatientrightIDs(ids ...int) {
	if m.removed_PatientrecordPatientrights == nil {
		m.removed_PatientrecordPatientrights = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_PatientrecordPatientrights[ids[i]] = struct{}{}
	}
}

// RemovedPatientrecordPatientrights returns the removed ids of PatientrecordPatientrights.
func (m *PatientrecordMutation) RemovedPatientrecordPatientrightsIDs() (ids []int) {
	for id := range m.removed_PatientrecordPatientrights {
		ids = append(ids, id)
	}
	return
}

// PatientrecordPatientrightsIDs returns the PatientrecordPatientrights ids in the mutation.
func (m *PatientrecordMutation) PatientrecordPatientrightsIDs() (ids []int) {
	for id := range m._PatientrecordPatientrights {
		ids = append(ids, id)
	}
	return
}

// ResetPatientrecordPatientrights reset all changes of the "PatientrecordPatientrights" edge.
func (m *PatientrecordMutation) ResetPatientrecordPatientrights() {
	m._PatientrecordPatientrights = nil
	m.removed_PatientrecordPatientrights = nil
}

// Op returns the operation name.
func (m *PatientrecordMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Patientrecord).
func (m *PatientrecordMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PatientrecordMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Name != nil {
		fields = append(fields, patientrecord.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PatientrecordMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case patientrecord.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PatientrecordMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case patientrecord.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Patientrecord field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientrecordMutation) SetField(name string, value ent.Value) error {
	switch name {
	case patientrecord.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Patientrecord field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PatientrecordMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PatientrecordMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientrecordMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Patientrecord numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PatientrecordMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PatientrecordMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PatientrecordMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Patientrecord nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PatientrecordMutation) ResetField(name string) error {
	switch name {
	case patientrecord.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Patientrecord field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PatientrecordMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._PatientrecordPatientrights != nil {
		edges = append(edges, patientrecord.EdgePatientrecordPatientrights)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PatientrecordMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case patientrecord.EdgePatientrecordPatientrights:
		ids := make([]ent.Value, 0, len(m._PatientrecordPatientrights))
		for id := range m._PatientrecordPatientrights {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PatientrecordMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_PatientrecordPatientrights != nil {
		edges = append(edges, patientrecord.EdgePatientrecordPatientrights)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PatientrecordMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case patientrecord.EdgePatientrecordPatientrights:
		ids := make([]ent.Value, 0, len(m.removed_PatientrecordPatientrights))
		for id := range m.removed_PatientrecordPatientrights {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PatientrecordMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PatientrecordMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PatientrecordMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Patientrecord unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PatientrecordMutation) ResetEdge(name string) error {
	switch name {
	case patientrecord.EdgePatientrecordPatientrights:
		m.ResetPatientrecordPatientrights()
		return nil
	}
	return fmt.Errorf("unknown Patientrecord edge %s", name)
}

// PatientrightsMutation represents an operation that mutate the PatientrightsSlice
// nodes in the graph.
type PatientrightsMutation struct {
	config
	op                                      Op
	typ                                     string
	id                                      *int
	_PermissionDate                         *string
	clearedFields                           map[string]struct{}
	_PatientrightsPatientrightstype         *int
	cleared_PatientrightsPatientrightstype  bool
	_PatientrightsInsurance                 *int
	cleared_PatientrightsInsurance          bool
	_PatientrightsPatientrecord             *int
	cleared_PatientrightsPatientrecord      bool
	_PatientrightsMedicalrecordstaff        *int
	cleared_PatientrightsMedicalrecordstaff bool
	done                                    bool
	oldValue                                func(context.Context) (*Patientrights, error)
}

var _ ent.Mutation = (*PatientrightsMutation)(nil)

// patientrightsOption allows to manage the mutation configuration using functional options.
type patientrightsOption func(*PatientrightsMutation)

// newPatientrightsMutation creates new mutation for $n.Name.
func newPatientrightsMutation(c config, op Op, opts ...patientrightsOption) *PatientrightsMutation {
	m := &PatientrightsMutation{
		config:        c,
		op:            op,
		typ:           TypePatientrights,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPatientrightsID sets the id field of the mutation.
func withPatientrightsID(id int) patientrightsOption {
	return func(m *PatientrightsMutation) {
		var (
			err   error
			once  sync.Once
			value *Patientrights
		)
		m.oldValue = func(ctx context.Context) (*Patientrights, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Patientrights.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPatientrights sets the old Patientrights of the mutation.
func withPatientrights(node *Patientrights) patientrightsOption {
	return func(m *PatientrightsMutation) {
		m.oldValue = func(context.Context) (*Patientrights, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PatientrightsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PatientrightsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PatientrightsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPermissionDate sets the PermissionDate field.
func (m *PatientrightsMutation) SetPermissionDate(s string) {
	m._PermissionDate = &s
}

// PermissionDate returns the PermissionDate value in the mutation.
func (m *PatientrightsMutation) PermissionDate() (r string, exists bool) {
	v := m._PermissionDate
	if v == nil {
		return
	}
	return *v, true
}

// OldPermissionDate returns the old PermissionDate value of the Patientrights.
// If the Patientrights object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientrightsMutation) OldPermissionDate(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPermissionDate is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPermissionDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPermissionDate: %w", err)
	}
	return oldValue.PermissionDate, nil
}

// ResetPermissionDate reset all changes of the "PermissionDate" field.
func (m *PatientrightsMutation) ResetPermissionDate() {
	m._PermissionDate = nil
}

// SetPatientrightsPatientrightstypeID sets the PatientrightsPatientrightstype edge to Patientrightstype by id.
func (m *PatientrightsMutation) SetPatientrightsPatientrightstypeID(id int) {
	m._PatientrightsPatientrightstype = &id
}

// ClearPatientrightsPatientrightstype clears the PatientrightsPatientrightstype edge to Patientrightstype.
func (m *PatientrightsMutation) ClearPatientrightsPatientrightstype() {
	m.cleared_PatientrightsPatientrightstype = true
}

// PatientrightsPatientrightstypeCleared returns if the edge PatientrightsPatientrightstype was cleared.
func (m *PatientrightsMutation) PatientrightsPatientrightstypeCleared() bool {
	return m.cleared_PatientrightsPatientrightstype
}

// PatientrightsPatientrightstypeID returns the PatientrightsPatientrightstype id in the mutation.
func (m *PatientrightsMutation) PatientrightsPatientrightstypeID() (id int, exists bool) {
	if m._PatientrightsPatientrightstype != nil {
		return *m._PatientrightsPatientrightstype, true
	}
	return
}

// PatientrightsPatientrightstypeIDs returns the PatientrightsPatientrightstype ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// PatientrightsPatientrightstypeID instead. It exists only for internal usage by the builders.
func (m *PatientrightsMutation) PatientrightsPatientrightstypeIDs() (ids []int) {
	if id := m._PatientrightsPatientrightstype; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPatientrightsPatientrightstype reset all changes of the "PatientrightsPatientrightstype" edge.
func (m *PatientrightsMutation) ResetPatientrightsPatientrightstype() {
	m._PatientrightsPatientrightstype = nil
	m.cleared_PatientrightsPatientrightstype = false
}

// SetPatientrightsInsuranceID sets the PatientrightsInsurance edge to Insurance by id.
func (m *PatientrightsMutation) SetPatientrightsInsuranceID(id int) {
	m._PatientrightsInsurance = &id
}

// ClearPatientrightsInsurance clears the PatientrightsInsurance edge to Insurance.
func (m *PatientrightsMutation) ClearPatientrightsInsurance() {
	m.cleared_PatientrightsInsurance = true
}

// PatientrightsInsuranceCleared returns if the edge PatientrightsInsurance was cleared.
func (m *PatientrightsMutation) PatientrightsInsuranceCleared() bool {
	return m.cleared_PatientrightsInsurance
}

// PatientrightsInsuranceID returns the PatientrightsInsurance id in the mutation.
func (m *PatientrightsMutation) PatientrightsInsuranceID() (id int, exists bool) {
	if m._PatientrightsInsurance != nil {
		return *m._PatientrightsInsurance, true
	}
	return
}

// PatientrightsInsuranceIDs returns the PatientrightsInsurance ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// PatientrightsInsuranceID instead. It exists only for internal usage by the builders.
func (m *PatientrightsMutation) PatientrightsInsuranceIDs() (ids []int) {
	if id := m._PatientrightsInsurance; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPatientrightsInsurance reset all changes of the "PatientrightsInsurance" edge.
func (m *PatientrightsMutation) ResetPatientrightsInsurance() {
	m._PatientrightsInsurance = nil
	m.cleared_PatientrightsInsurance = false
}

// SetPatientrightsPatientrecordID sets the PatientrightsPatientrecord edge to Patientrecord by id.
func (m *PatientrightsMutation) SetPatientrightsPatientrecordID(id int) {
	m._PatientrightsPatientrecord = &id
}

// ClearPatientrightsPatientrecord clears the PatientrightsPatientrecord edge to Patientrecord.
func (m *PatientrightsMutation) ClearPatientrightsPatientrecord() {
	m.cleared_PatientrightsPatientrecord = true
}

// PatientrightsPatientrecordCleared returns if the edge PatientrightsPatientrecord was cleared.
func (m *PatientrightsMutation) PatientrightsPatientrecordCleared() bool {
	return m.cleared_PatientrightsPatientrecord
}

// PatientrightsPatientrecordID returns the PatientrightsPatientrecord id in the mutation.
func (m *PatientrightsMutation) PatientrightsPatientrecordID() (id int, exists bool) {
	if m._PatientrightsPatientrecord != nil {
		return *m._PatientrightsPatientrecord, true
	}
	return
}

// PatientrightsPatientrecordIDs returns the PatientrightsPatientrecord ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// PatientrightsPatientrecordID instead. It exists only for internal usage by the builders.
func (m *PatientrightsMutation) PatientrightsPatientrecordIDs() (ids []int) {
	if id := m._PatientrightsPatientrecord; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPatientrightsPatientrecord reset all changes of the "PatientrightsPatientrecord" edge.
func (m *PatientrightsMutation) ResetPatientrightsPatientrecord() {
	m._PatientrightsPatientrecord = nil
	m.cleared_PatientrightsPatientrecord = false
}

// SetPatientrightsMedicalrecordstaffID sets the PatientrightsMedicalrecordstaff edge to Medicalrecordstaff by id.
func (m *PatientrightsMutation) SetPatientrightsMedicalrecordstaffID(id int) {
	m._PatientrightsMedicalrecordstaff = &id
}

// ClearPatientrightsMedicalrecordstaff clears the PatientrightsMedicalrecordstaff edge to Medicalrecordstaff.
func (m *PatientrightsMutation) ClearPatientrightsMedicalrecordstaff() {
	m.cleared_PatientrightsMedicalrecordstaff = true
}

// PatientrightsMedicalrecordstaffCleared returns if the edge PatientrightsMedicalrecordstaff was cleared.
func (m *PatientrightsMutation) PatientrightsMedicalrecordstaffCleared() bool {
	return m.cleared_PatientrightsMedicalrecordstaff
}

// PatientrightsMedicalrecordstaffID returns the PatientrightsMedicalrecordstaff id in the mutation.
func (m *PatientrightsMutation) PatientrightsMedicalrecordstaffID() (id int, exists bool) {
	if m._PatientrightsMedicalrecordstaff != nil {
		return *m._PatientrightsMedicalrecordstaff, true
	}
	return
}

// PatientrightsMedicalrecordstaffIDs returns the PatientrightsMedicalrecordstaff ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// PatientrightsMedicalrecordstaffID instead. It exists only for internal usage by the builders.
func (m *PatientrightsMutation) PatientrightsMedicalrecordstaffIDs() (ids []int) {
	if id := m._PatientrightsMedicalrecordstaff; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPatientrightsMedicalrecordstaff reset all changes of the "PatientrightsMedicalrecordstaff" edge.
func (m *PatientrightsMutation) ResetPatientrightsMedicalrecordstaff() {
	m._PatientrightsMedicalrecordstaff = nil
	m.cleared_PatientrightsMedicalrecordstaff = false
}

// Op returns the operation name.
func (m *PatientrightsMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Patientrights).
func (m *PatientrightsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PatientrightsMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._PermissionDate != nil {
		fields = append(fields, patientrights.FieldPermissionDate)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PatientrightsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case patientrights.FieldPermissionDate:
		return m.PermissionDate()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PatientrightsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case patientrights.FieldPermissionDate:
		return m.OldPermissionDate(ctx)
	}
	return nil, fmt.Errorf("unknown Patientrights field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientrightsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case patientrights.FieldPermissionDate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPermissionDate(v)
		return nil
	}
	return fmt.Errorf("unknown Patientrights field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PatientrightsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PatientrightsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientrightsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Patientrights numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PatientrightsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PatientrightsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PatientrightsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Patientrights nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PatientrightsMutation) ResetField(name string) error {
	switch name {
	case patientrights.FieldPermissionDate:
		m.ResetPermissionDate()
		return nil
	}
	return fmt.Errorf("unknown Patientrights field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PatientrightsMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m._PatientrightsPatientrightstype != nil {
		edges = append(edges, patientrights.EdgePatientrightsPatientrightstype)
	}
	if m._PatientrightsInsurance != nil {
		edges = append(edges, patientrights.EdgePatientrightsInsurance)
	}
	if m._PatientrightsPatientrecord != nil {
		edges = append(edges, patientrights.EdgePatientrightsPatientrecord)
	}
	if m._PatientrightsMedicalrecordstaff != nil {
		edges = append(edges, patientrights.EdgePatientrightsMedicalrecordstaff)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PatientrightsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case patientrights.EdgePatientrightsPatientrightstype:
		if id := m._PatientrightsPatientrightstype; id != nil {
			return []ent.Value{*id}
		}
	case patientrights.EdgePatientrightsInsurance:
		if id := m._PatientrightsInsurance; id != nil {
			return []ent.Value{*id}
		}
	case patientrights.EdgePatientrightsPatientrecord:
		if id := m._PatientrightsPatientrecord; id != nil {
			return []ent.Value{*id}
		}
	case patientrights.EdgePatientrightsMedicalrecordstaff:
		if id := m._PatientrightsMedicalrecordstaff; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PatientrightsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PatientrightsMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PatientrightsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.cleared_PatientrightsPatientrightstype {
		edges = append(edges, patientrights.EdgePatientrightsPatientrightstype)
	}
	if m.cleared_PatientrightsInsurance {
		edges = append(edges, patientrights.EdgePatientrightsInsurance)
	}
	if m.cleared_PatientrightsPatientrecord {
		edges = append(edges, patientrights.EdgePatientrightsPatientrecord)
	}
	if m.cleared_PatientrightsMedicalrecordstaff {
		edges = append(edges, patientrights.EdgePatientrightsMedicalrecordstaff)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PatientrightsMutation) EdgeCleared(name string) bool {
	switch name {
	case patientrights.EdgePatientrightsPatientrightstype:
		return m.cleared_PatientrightsPatientrightstype
	case patientrights.EdgePatientrightsInsurance:
		return m.cleared_PatientrightsInsurance
	case patientrights.EdgePatientrightsPatientrecord:
		return m.cleared_PatientrightsPatientrecord
	case patientrights.EdgePatientrightsMedicalrecordstaff:
		return m.cleared_PatientrightsMedicalrecordstaff
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PatientrightsMutation) ClearEdge(name string) error {
	switch name {
	case patientrights.EdgePatientrightsPatientrightstype:
		m.ClearPatientrightsPatientrightstype()
		return nil
	case patientrights.EdgePatientrightsInsurance:
		m.ClearPatientrightsInsurance()
		return nil
	case patientrights.EdgePatientrightsPatientrecord:
		m.ClearPatientrightsPatientrecord()
		return nil
	case patientrights.EdgePatientrightsMedicalrecordstaff:
		m.ClearPatientrightsMedicalrecordstaff()
		return nil
	}
	return fmt.Errorf("unknown Patientrights unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PatientrightsMutation) ResetEdge(name string) error {
	switch name {
	case patientrights.EdgePatientrightsPatientrightstype:
		m.ResetPatientrightsPatientrightstype()
		return nil
	case patientrights.EdgePatientrightsInsurance:
		m.ResetPatientrightsInsurance()
		return nil
	case patientrights.EdgePatientrightsPatientrecord:
		m.ResetPatientrightsPatientrecord()
		return nil
	case patientrights.EdgePatientrightsMedicalrecordstaff:
		m.ResetPatientrightsMedicalrecordstaff()
		return nil
	}
	return fmt.Errorf("unknown Patientrights edge %s", name)
}

// PatientrightstypeMutation represents an operation that mutate the Patientrightstypes
// nodes in the graph.
type PatientrightstypeMutation struct {
	config
	op                                            Op
	typ                                           string
	id                                            *int
	_Permission                                   *string
	_PermissionArea                               *string
	_Responsible                                  *string
	clearedFields                                 map[string]struct{}
	_PatientrightstypePatientrights               map[int]struct{}
	removed_PatientrightstypePatientrights        map[int]struct{}
	_PatientrightstypeAbilitypatientrights        *int
	cleared_PatientrightstypeAbilitypatientrights bool
	done                                          bool
	oldValue                                      func(context.Context) (*Patientrightstype, error)
}

var _ ent.Mutation = (*PatientrightstypeMutation)(nil)

// patientrightstypeOption allows to manage the mutation configuration using functional options.
type patientrightstypeOption func(*PatientrightstypeMutation)

// newPatientrightstypeMutation creates new mutation for $n.Name.
func newPatientrightstypeMutation(c config, op Op, opts ...patientrightstypeOption) *PatientrightstypeMutation {
	m := &PatientrightstypeMutation{
		config:        c,
		op:            op,
		typ:           TypePatientrightstype,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPatientrightstypeID sets the id field of the mutation.
func withPatientrightstypeID(id int) patientrightstypeOption {
	return func(m *PatientrightstypeMutation) {
		var (
			err   error
			once  sync.Once
			value *Patientrightstype
		)
		m.oldValue = func(ctx context.Context) (*Patientrightstype, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Patientrightstype.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPatientrightstype sets the old Patientrightstype of the mutation.
func withPatientrightstype(node *Patientrightstype) patientrightstypeOption {
	return func(m *PatientrightstypeMutation) {
		m.oldValue = func(context.Context) (*Patientrightstype, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PatientrightstypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PatientrightstypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PatientrightstypeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPermission sets the Permission field.
func (m *PatientrightstypeMutation) SetPermission(s string) {
	m._Permission = &s
}

// Permission returns the Permission value in the mutation.
func (m *PatientrightstypeMutation) Permission() (r string, exists bool) {
	v := m._Permission
	if v == nil {
		return
	}
	return *v, true
}

// OldPermission returns the old Permission value of the Patientrightstype.
// If the Patientrightstype object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientrightstypeMutation) OldPermission(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPermission is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPermission requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPermission: %w", err)
	}
	return oldValue.Permission, nil
}

// ResetPermission reset all changes of the "Permission" field.
func (m *PatientrightstypeMutation) ResetPermission() {
	m._Permission = nil
}

// SetPermissionArea sets the PermissionArea field.
func (m *PatientrightstypeMutation) SetPermissionArea(s string) {
	m._PermissionArea = &s
}

// PermissionArea returns the PermissionArea value in the mutation.
func (m *PatientrightstypeMutation) PermissionArea() (r string, exists bool) {
	v := m._PermissionArea
	if v == nil {
		return
	}
	return *v, true
}

// OldPermissionArea returns the old PermissionArea value of the Patientrightstype.
// If the Patientrightstype object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientrightstypeMutation) OldPermissionArea(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPermissionArea is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPermissionArea requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPermissionArea: %w", err)
	}
	return oldValue.PermissionArea, nil
}

// ResetPermissionArea reset all changes of the "PermissionArea" field.
func (m *PatientrightstypeMutation) ResetPermissionArea() {
	m._PermissionArea = nil
}

// SetResponsible sets the Responsible field.
func (m *PatientrightstypeMutation) SetResponsible(s string) {
	m._Responsible = &s
}

// Responsible returns the Responsible value in the mutation.
func (m *PatientrightstypeMutation) Responsible() (r string, exists bool) {
	v := m._Responsible
	if v == nil {
		return
	}
	return *v, true
}

// OldResponsible returns the old Responsible value of the Patientrightstype.
// If the Patientrightstype object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientrightstypeMutation) OldResponsible(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldResponsible is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldResponsible requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResponsible: %w", err)
	}
	return oldValue.Responsible, nil
}

// ResetResponsible reset all changes of the "Responsible" field.
func (m *PatientrightstypeMutation) ResetResponsible() {
	m._Responsible = nil
}

// AddPatientrightstypePatientrightIDs adds the PatientrightstypePatientrights edge to Patientrights by ids.
func (m *PatientrightstypeMutation) AddPatientrightstypePatientrightIDs(ids ...int) {
	if m._PatientrightstypePatientrights == nil {
		m._PatientrightstypePatientrights = make(map[int]struct{})
	}
	for i := range ids {
		m._PatientrightstypePatientrights[ids[i]] = struct{}{}
	}
}

// RemovePatientrightstypePatientrightIDs removes the PatientrightstypePatientrights edge to Patientrights by ids.
func (m *PatientrightstypeMutation) RemovePatientrightstypePatientrightIDs(ids ...int) {
	if m.removed_PatientrightstypePatientrights == nil {
		m.removed_PatientrightstypePatientrights = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_PatientrightstypePatientrights[ids[i]] = struct{}{}
	}
}

// RemovedPatientrightstypePatientrights returns the removed ids of PatientrightstypePatientrights.
func (m *PatientrightstypeMutation) RemovedPatientrightstypePatientrightsIDs() (ids []int) {
	for id := range m.removed_PatientrightstypePatientrights {
		ids = append(ids, id)
	}
	return
}

// PatientrightstypePatientrightsIDs returns the PatientrightstypePatientrights ids in the mutation.
func (m *PatientrightstypeMutation) PatientrightstypePatientrightsIDs() (ids []int) {
	for id := range m._PatientrightstypePatientrights {
		ids = append(ids, id)
	}
	return
}

// ResetPatientrightstypePatientrights reset all changes of the "PatientrightstypePatientrights" edge.
func (m *PatientrightstypeMutation) ResetPatientrightstypePatientrights() {
	m._PatientrightstypePatientrights = nil
	m.removed_PatientrightstypePatientrights = nil
}

// SetPatientrightstypeAbilitypatientrightsID sets the PatientrightstypeAbilitypatientrights edge to Abilitypatientrights by id.
func (m *PatientrightstypeMutation) SetPatientrightstypeAbilitypatientrightsID(id int) {
	m._PatientrightstypeAbilitypatientrights = &id
}

// ClearPatientrightstypeAbilitypatientrights clears the PatientrightstypeAbilitypatientrights edge to Abilitypatientrights.
func (m *PatientrightstypeMutation) ClearPatientrightstypeAbilitypatientrights() {
	m.cleared_PatientrightstypeAbilitypatientrights = true
}

// PatientrightstypeAbilitypatientrightsCleared returns if the edge PatientrightstypeAbilitypatientrights was cleared.
func (m *PatientrightstypeMutation) PatientrightstypeAbilitypatientrightsCleared() bool {
	return m.cleared_PatientrightstypeAbilitypatientrights
}

// PatientrightstypeAbilitypatientrightsID returns the PatientrightstypeAbilitypatientrights id in the mutation.
func (m *PatientrightstypeMutation) PatientrightstypeAbilitypatientrightsID() (id int, exists bool) {
	if m._PatientrightstypeAbilitypatientrights != nil {
		return *m._PatientrightstypeAbilitypatientrights, true
	}
	return
}

// PatientrightstypeAbilitypatientrightsIDs returns the PatientrightstypeAbilitypatientrights ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// PatientrightstypeAbilitypatientrightsID instead. It exists only for internal usage by the builders.
func (m *PatientrightstypeMutation) PatientrightstypeAbilitypatientrightsIDs() (ids []int) {
	if id := m._PatientrightstypeAbilitypatientrights; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPatientrightstypeAbilitypatientrights reset all changes of the "PatientrightstypeAbilitypatientrights" edge.
func (m *PatientrightstypeMutation) ResetPatientrightstypeAbilitypatientrights() {
	m._PatientrightstypeAbilitypatientrights = nil
	m.cleared_PatientrightstypeAbilitypatientrights = false
}

// Op returns the operation name.
func (m *PatientrightstypeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Patientrightstype).
func (m *PatientrightstypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PatientrightstypeMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._Permission != nil {
		fields = append(fields, patientrightstype.FieldPermission)
	}
	if m._PermissionArea != nil {
		fields = append(fields, patientrightstype.FieldPermissionArea)
	}
	if m._Responsible != nil {
		fields = append(fields, patientrightstype.FieldResponsible)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PatientrightstypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case patientrightstype.FieldPermission:
		return m.Permission()
	case patientrightstype.FieldPermissionArea:
		return m.PermissionArea()
	case patientrightstype.FieldResponsible:
		return m.Responsible()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PatientrightstypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case patientrightstype.FieldPermission:
		return m.OldPermission(ctx)
	case patientrightstype.FieldPermissionArea:
		return m.OldPermissionArea(ctx)
	case patientrightstype.FieldResponsible:
		return m.OldResponsible(ctx)
	}
	return nil, fmt.Errorf("unknown Patientrightstype field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientrightstypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case patientrightstype.FieldPermission:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPermission(v)
		return nil
	case patientrightstype.FieldPermissionArea:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPermissionArea(v)
		return nil
	case patientrightstype.FieldResponsible:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResponsible(v)
		return nil
	}
	return fmt.Errorf("unknown Patientrightstype field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PatientrightstypeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PatientrightstypeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientrightstypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Patientrightstype numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PatientrightstypeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PatientrightstypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PatientrightstypeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Patientrightstype nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PatientrightstypeMutation) ResetField(name string) error {
	switch name {
	case patientrightstype.FieldPermission:
		m.ResetPermission()
		return nil
	case patientrightstype.FieldPermissionArea:
		m.ResetPermissionArea()
		return nil
	case patientrightstype.FieldResponsible:
		m.ResetResponsible()
		return nil
	}
	return fmt.Errorf("unknown Patientrightstype field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PatientrightstypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m._PatientrightstypePatientrights != nil {
		edges = append(edges, patientrightstype.EdgePatientrightstypePatientrights)
	}
	if m._PatientrightstypeAbilitypatientrights != nil {
		edges = append(edges, patientrightstype.EdgePatientrightstypeAbilitypatientrights)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PatientrightstypeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case patientrightstype.EdgePatientrightstypePatientrights:
		ids := make([]ent.Value, 0, len(m._PatientrightstypePatientrights))
		for id := range m._PatientrightstypePatientrights {
			ids = append(ids, id)
		}
		return ids
	case patientrightstype.EdgePatientrightstypeAbilitypatientrights:
		if id := m._PatientrightstypeAbilitypatientrights; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PatientrightstypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removed_PatientrightstypePatientrights != nil {
		edges = append(edges, patientrightstype.EdgePatientrightstypePatientrights)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PatientrightstypeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case patientrightstype.EdgePatientrightstypePatientrights:
		ids := make([]ent.Value, 0, len(m.removed_PatientrightstypePatientrights))
		for id := range m.removed_PatientrightstypePatientrights {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PatientrightstypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleared_PatientrightstypeAbilitypatientrights {
		edges = append(edges, patientrightstype.EdgePatientrightstypeAbilitypatientrights)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PatientrightstypeMutation) EdgeCleared(name string) bool {
	switch name {
	case patientrightstype.EdgePatientrightstypeAbilitypatientrights:
		return m.cleared_PatientrightstypeAbilitypatientrights
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PatientrightstypeMutation) ClearEdge(name string) error {
	switch name {
	case patientrightstype.EdgePatientrightstypeAbilitypatientrights:
		m.ClearPatientrightstypeAbilitypatientrights()
		return nil
	}
	return fmt.Errorf("unknown Patientrightstype unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PatientrightstypeMutation) ResetEdge(name string) error {
	switch name {
	case patientrightstype.EdgePatientrightstypePatientrights:
		m.ResetPatientrightstypePatientrights()
		return nil
	case patientrightstype.EdgePatientrightstypeAbilitypatientrights:
		m.ResetPatientrightstypeAbilitypatientrights()
		return nil
	}
	return fmt.Errorf("unknown Patientrightstype edge %s", name)
}
