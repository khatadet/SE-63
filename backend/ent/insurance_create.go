// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/PON/app/ent/insurance"
	"github.com/PON/app/ent/patientrights"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// InsuranceCreate is the builder for creating a Insurance entity.
type InsuranceCreate struct {
	config
	mutation *InsuranceMutation
	hooks    []Hook
}

// SetInsurancecompany sets the Insurancecompany field.
func (ic *InsuranceCreate) SetInsurancecompany(s string) *InsuranceCreate {
	ic.mutation.SetInsurancecompany(s)
	return ic
}

// AddInsurancePatientrightIDs adds the InsurancePatientrights edge to Patientrights by ids.
func (ic *InsuranceCreate) AddInsurancePatientrightIDs(ids ...int) *InsuranceCreate {
	ic.mutation.AddInsurancePatientrightIDs(ids...)
	return ic
}

// AddInsurancePatientrights adds the InsurancePatientrights edges to Patientrights.
func (ic *InsuranceCreate) AddInsurancePatientrights(p ...*Patientrights) *InsuranceCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ic.AddInsurancePatientrightIDs(ids...)
}

// Mutation returns the InsuranceMutation object of the builder.
func (ic *InsuranceCreate) Mutation() *InsuranceMutation {
	return ic.mutation
}

// Save creates the Insurance in the database.
func (ic *InsuranceCreate) Save(ctx context.Context) (*Insurance, error) {
	if _, ok := ic.mutation.Insurancecompany(); !ok {
		return nil, &ValidationError{Name: "Insurancecompany", err: errors.New("ent: missing required field \"Insurancecompany\"")}
	}
	var (
		err  error
		node *Insurance
	)
	if len(ic.hooks) == 0 {
		node, err = ic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InsuranceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ic.mutation = mutation
			node, err = ic.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ic.hooks) - 1; i >= 0; i-- {
			mut = ic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InsuranceCreate) SaveX(ctx context.Context) *Insurance {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ic *InsuranceCreate) sqlSave(ctx context.Context) (*Insurance, error) {
	i, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	i.ID = int(id)
	return i, nil
}

func (ic *InsuranceCreate) createSpec() (*Insurance, *sqlgraph.CreateSpec) {
	var (
		i     = &Insurance{config: ic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: insurance.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: insurance.FieldID,
			},
		}
	)
	if value, ok := ic.mutation.Insurancecompany(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: insurance.FieldInsurancecompany,
		})
		i.Insurancecompany = value
	}
	if nodes := ic.mutation.InsurancePatientrightsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   insurance.InsurancePatientrightsTable,
			Columns: []string{insurance.InsurancePatientrightsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patientrights.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return i, _spec
}
