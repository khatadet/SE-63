// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/PON/app/ent/migrate"

	"github.com/PON/app/ent/abilitypatientrights"
	"github.com/PON/app/ent/insurance"
	"github.com/PON/app/ent/medicalrecordstaff"
	"github.com/PON/app/ent/patientrecord"
	"github.com/PON/app/ent/patientrights"
	"github.com/PON/app/ent/patientrightstype"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Abilitypatientrights is the client for interacting with the Abilitypatientrights builders.
	Abilitypatientrights *AbilitypatientrightsClient
	// Insurance is the client for interacting with the Insurance builders.
	Insurance *InsuranceClient
	// Medicalrecordstaff is the client for interacting with the Medicalrecordstaff builders.
	Medicalrecordstaff *MedicalrecordstaffClient
	// Patientrecord is the client for interacting with the Patientrecord builders.
	Patientrecord *PatientrecordClient
	// Patientrights is the client for interacting with the Patientrights builders.
	Patientrights *PatientrightsClient
	// Patientrightstype is the client for interacting with the Patientrightstype builders.
	Patientrightstype *PatientrightstypeClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Abilitypatientrights = NewAbilitypatientrightsClient(c.config)
	c.Insurance = NewInsuranceClient(c.config)
	c.Medicalrecordstaff = NewMedicalrecordstaffClient(c.config)
	c.Patientrecord = NewPatientrecordClient(c.config)
	c.Patientrights = NewPatientrightsClient(c.config)
	c.Patientrightstype = NewPatientrightstypeClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		Abilitypatientrights: NewAbilitypatientrightsClient(cfg),
		Insurance:            NewInsuranceClient(cfg),
		Medicalrecordstaff:   NewMedicalrecordstaffClient(cfg),
		Patientrecord:        NewPatientrecordClient(cfg),
		Patientrights:        NewPatientrightsClient(cfg),
		Patientrightstype:    NewPatientrightstypeClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:               cfg,
		Abilitypatientrights: NewAbilitypatientrightsClient(cfg),
		Insurance:            NewInsuranceClient(cfg),
		Medicalrecordstaff:   NewMedicalrecordstaffClient(cfg),
		Patientrecord:        NewPatientrecordClient(cfg),
		Patientrights:        NewPatientrightsClient(cfg),
		Patientrightstype:    NewPatientrightstypeClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Abilitypatientrights.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Abilitypatientrights.Use(hooks...)
	c.Insurance.Use(hooks...)
	c.Medicalrecordstaff.Use(hooks...)
	c.Patientrecord.Use(hooks...)
	c.Patientrights.Use(hooks...)
	c.Patientrightstype.Use(hooks...)
}

// AbilitypatientrightsClient is a client for the Abilitypatientrights schema.
type AbilitypatientrightsClient struct {
	config
}

// NewAbilitypatientrightsClient returns a client for the Abilitypatientrights from the given config.
func NewAbilitypatientrightsClient(c config) *AbilitypatientrightsClient {
	return &AbilitypatientrightsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `abilitypatientrights.Hooks(f(g(h())))`.
func (c *AbilitypatientrightsClient) Use(hooks ...Hook) {
	c.hooks.Abilitypatientrights = append(c.hooks.Abilitypatientrights, hooks...)
}

// Create returns a create builder for Abilitypatientrights.
func (c *AbilitypatientrightsClient) Create() *AbilitypatientrightsCreate {
	mutation := newAbilitypatientrightsMutation(c.config, OpCreate)
	return &AbilitypatientrightsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Abilitypatientrights.
func (c *AbilitypatientrightsClient) Update() *AbilitypatientrightsUpdate {
	mutation := newAbilitypatientrightsMutation(c.config, OpUpdate)
	return &AbilitypatientrightsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AbilitypatientrightsClient) UpdateOne(a *Abilitypatientrights) *AbilitypatientrightsUpdateOne {
	mutation := newAbilitypatientrightsMutation(c.config, OpUpdateOne, withAbilitypatientrights(a))
	return &AbilitypatientrightsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AbilitypatientrightsClient) UpdateOneID(id int) *AbilitypatientrightsUpdateOne {
	mutation := newAbilitypatientrightsMutation(c.config, OpUpdateOne, withAbilitypatientrightsID(id))
	return &AbilitypatientrightsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Abilitypatientrights.
func (c *AbilitypatientrightsClient) Delete() *AbilitypatientrightsDelete {
	mutation := newAbilitypatientrightsMutation(c.config, OpDelete)
	return &AbilitypatientrightsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AbilitypatientrightsClient) DeleteOne(a *Abilitypatientrights) *AbilitypatientrightsDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AbilitypatientrightsClient) DeleteOneID(id int) *AbilitypatientrightsDeleteOne {
	builder := c.Delete().Where(abilitypatientrights.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AbilitypatientrightsDeleteOne{builder}
}

// Create returns a query builder for Abilitypatientrights.
func (c *AbilitypatientrightsClient) Query() *AbilitypatientrightsQuery {
	return &AbilitypatientrightsQuery{config: c.config}
}

// Get returns a Abilitypatientrights entity by its id.
func (c *AbilitypatientrightsClient) Get(ctx context.Context, id int) (*Abilitypatientrights, error) {
	return c.Query().Where(abilitypatientrights.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AbilitypatientrightsClient) GetX(ctx context.Context, id int) *Abilitypatientrights {
	a, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return a
}

// QueryAbilitypatientrightsPatientrightstype queries the AbilitypatientrightsPatientrightstype edge of a Abilitypatientrights.
func (c *AbilitypatientrightsClient) QueryAbilitypatientrightsPatientrightstype(a *Abilitypatientrights) *PatientrightstypeQuery {
	query := &PatientrightstypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(abilitypatientrights.Table, abilitypatientrights.FieldID, id),
			sqlgraph.To(patientrightstype.Table, patientrightstype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, abilitypatientrights.AbilitypatientrightsPatientrightstypeTable, abilitypatientrights.AbilitypatientrightsPatientrightstypeColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AbilitypatientrightsClient) Hooks() []Hook {
	return c.hooks.Abilitypatientrights
}

// InsuranceClient is a client for the Insurance schema.
type InsuranceClient struct {
	config
}

// NewInsuranceClient returns a client for the Insurance from the given config.
func NewInsuranceClient(c config) *InsuranceClient {
	return &InsuranceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `insurance.Hooks(f(g(h())))`.
func (c *InsuranceClient) Use(hooks ...Hook) {
	c.hooks.Insurance = append(c.hooks.Insurance, hooks...)
}

// Create returns a create builder for Insurance.
func (c *InsuranceClient) Create() *InsuranceCreate {
	mutation := newInsuranceMutation(c.config, OpCreate)
	return &InsuranceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Insurance.
func (c *InsuranceClient) Update() *InsuranceUpdate {
	mutation := newInsuranceMutation(c.config, OpUpdate)
	return &InsuranceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InsuranceClient) UpdateOne(i *Insurance) *InsuranceUpdateOne {
	mutation := newInsuranceMutation(c.config, OpUpdateOne, withInsurance(i))
	return &InsuranceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InsuranceClient) UpdateOneID(id int) *InsuranceUpdateOne {
	mutation := newInsuranceMutation(c.config, OpUpdateOne, withInsuranceID(id))
	return &InsuranceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Insurance.
func (c *InsuranceClient) Delete() *InsuranceDelete {
	mutation := newInsuranceMutation(c.config, OpDelete)
	return &InsuranceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *InsuranceClient) DeleteOne(i *Insurance) *InsuranceDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *InsuranceClient) DeleteOneID(id int) *InsuranceDeleteOne {
	builder := c.Delete().Where(insurance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InsuranceDeleteOne{builder}
}

// Create returns a query builder for Insurance.
func (c *InsuranceClient) Query() *InsuranceQuery {
	return &InsuranceQuery{config: c.config}
}

// Get returns a Insurance entity by its id.
func (c *InsuranceClient) Get(ctx context.Context, id int) (*Insurance, error) {
	return c.Query().Where(insurance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InsuranceClient) GetX(ctx context.Context, id int) *Insurance {
	i, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return i
}

// QueryInsurancePatientrights queries the InsurancePatientrights edge of a Insurance.
func (c *InsuranceClient) QueryInsurancePatientrights(i *Insurance) *PatientrightsQuery {
	query := &PatientrightsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(insurance.Table, insurance.FieldID, id),
			sqlgraph.To(patientrights.Table, patientrights.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, insurance.InsurancePatientrightsTable, insurance.InsurancePatientrightsColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InsuranceClient) Hooks() []Hook {
	return c.hooks.Insurance
}

// MedicalrecordstaffClient is a client for the Medicalrecordstaff schema.
type MedicalrecordstaffClient struct {
	config
}

// NewMedicalrecordstaffClient returns a client for the Medicalrecordstaff from the given config.
func NewMedicalrecordstaffClient(c config) *MedicalrecordstaffClient {
	return &MedicalrecordstaffClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `medicalrecordstaff.Hooks(f(g(h())))`.
func (c *MedicalrecordstaffClient) Use(hooks ...Hook) {
	c.hooks.Medicalrecordstaff = append(c.hooks.Medicalrecordstaff, hooks...)
}

// Create returns a create builder for Medicalrecordstaff.
func (c *MedicalrecordstaffClient) Create() *MedicalrecordstaffCreate {
	mutation := newMedicalrecordstaffMutation(c.config, OpCreate)
	return &MedicalrecordstaffCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Medicalrecordstaff.
func (c *MedicalrecordstaffClient) Update() *MedicalrecordstaffUpdate {
	mutation := newMedicalrecordstaffMutation(c.config, OpUpdate)
	return &MedicalrecordstaffUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MedicalrecordstaffClient) UpdateOne(m *Medicalrecordstaff) *MedicalrecordstaffUpdateOne {
	mutation := newMedicalrecordstaffMutation(c.config, OpUpdateOne, withMedicalrecordstaff(m))
	return &MedicalrecordstaffUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MedicalrecordstaffClient) UpdateOneID(id int) *MedicalrecordstaffUpdateOne {
	mutation := newMedicalrecordstaffMutation(c.config, OpUpdateOne, withMedicalrecordstaffID(id))
	return &MedicalrecordstaffUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Medicalrecordstaff.
func (c *MedicalrecordstaffClient) Delete() *MedicalrecordstaffDelete {
	mutation := newMedicalrecordstaffMutation(c.config, OpDelete)
	return &MedicalrecordstaffDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MedicalrecordstaffClient) DeleteOne(m *Medicalrecordstaff) *MedicalrecordstaffDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MedicalrecordstaffClient) DeleteOneID(id int) *MedicalrecordstaffDeleteOne {
	builder := c.Delete().Where(medicalrecordstaff.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MedicalrecordstaffDeleteOne{builder}
}

// Create returns a query builder for Medicalrecordstaff.
func (c *MedicalrecordstaffClient) Query() *MedicalrecordstaffQuery {
	return &MedicalrecordstaffQuery{config: c.config}
}

// Get returns a Medicalrecordstaff entity by its id.
func (c *MedicalrecordstaffClient) Get(ctx context.Context, id int) (*Medicalrecordstaff, error) {
	return c.Query().Where(medicalrecordstaff.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MedicalrecordstaffClient) GetX(ctx context.Context, id int) *Medicalrecordstaff {
	m, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return m
}

// QueryMedicalrecordstaffPatientrights queries the MedicalrecordstaffPatientrights edge of a Medicalrecordstaff.
func (c *MedicalrecordstaffClient) QueryMedicalrecordstaffPatientrights(m *Medicalrecordstaff) *PatientrightsQuery {
	query := &PatientrightsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(medicalrecordstaff.Table, medicalrecordstaff.FieldID, id),
			sqlgraph.To(patientrights.Table, patientrights.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, medicalrecordstaff.MedicalrecordstaffPatientrightsTable, medicalrecordstaff.MedicalrecordstaffPatientrightsColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MedicalrecordstaffClient) Hooks() []Hook {
	return c.hooks.Medicalrecordstaff
}

// PatientrecordClient is a client for the Patientrecord schema.
type PatientrecordClient struct {
	config
}

// NewPatientrecordClient returns a client for the Patientrecord from the given config.
func NewPatientrecordClient(c config) *PatientrecordClient {
	return &PatientrecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `patientrecord.Hooks(f(g(h())))`.
func (c *PatientrecordClient) Use(hooks ...Hook) {
	c.hooks.Patientrecord = append(c.hooks.Patientrecord, hooks...)
}

// Create returns a create builder for Patientrecord.
func (c *PatientrecordClient) Create() *PatientrecordCreate {
	mutation := newPatientrecordMutation(c.config, OpCreate)
	return &PatientrecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Patientrecord.
func (c *PatientrecordClient) Update() *PatientrecordUpdate {
	mutation := newPatientrecordMutation(c.config, OpUpdate)
	return &PatientrecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PatientrecordClient) UpdateOne(pa *Patientrecord) *PatientrecordUpdateOne {
	mutation := newPatientrecordMutation(c.config, OpUpdateOne, withPatientrecord(pa))
	return &PatientrecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PatientrecordClient) UpdateOneID(id int) *PatientrecordUpdateOne {
	mutation := newPatientrecordMutation(c.config, OpUpdateOne, withPatientrecordID(id))
	return &PatientrecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Patientrecord.
func (c *PatientrecordClient) Delete() *PatientrecordDelete {
	mutation := newPatientrecordMutation(c.config, OpDelete)
	return &PatientrecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PatientrecordClient) DeleteOne(pa *Patientrecord) *PatientrecordDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PatientrecordClient) DeleteOneID(id int) *PatientrecordDeleteOne {
	builder := c.Delete().Where(patientrecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PatientrecordDeleteOne{builder}
}

// Create returns a query builder for Patientrecord.
func (c *PatientrecordClient) Query() *PatientrecordQuery {
	return &PatientrecordQuery{config: c.config}
}

// Get returns a Patientrecord entity by its id.
func (c *PatientrecordClient) Get(ctx context.Context, id int) (*Patientrecord, error) {
	return c.Query().Where(patientrecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PatientrecordClient) GetX(ctx context.Context, id int) *Patientrecord {
	pa, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pa
}

// QueryPatientrecordPatientrights queries the PatientrecordPatientrights edge of a Patientrecord.
func (c *PatientrecordClient) QueryPatientrecordPatientrights(pa *Patientrecord) *PatientrightsQuery {
	query := &PatientrightsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patientrecord.Table, patientrecord.FieldID, id),
			sqlgraph.To(patientrights.Table, patientrights.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, patientrecord.PatientrecordPatientrightsTable, patientrecord.PatientrecordPatientrightsColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PatientrecordClient) Hooks() []Hook {
	return c.hooks.Patientrecord
}

// PatientrightsClient is a client for the Patientrights schema.
type PatientrightsClient struct {
	config
}

// NewPatientrightsClient returns a client for the Patientrights from the given config.
func NewPatientrightsClient(c config) *PatientrightsClient {
	return &PatientrightsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `patientrights.Hooks(f(g(h())))`.
func (c *PatientrightsClient) Use(hooks ...Hook) {
	c.hooks.Patientrights = append(c.hooks.Patientrights, hooks...)
}

// Create returns a create builder for Patientrights.
func (c *PatientrightsClient) Create() *PatientrightsCreate {
	mutation := newPatientrightsMutation(c.config, OpCreate)
	return &PatientrightsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Patientrights.
func (c *PatientrightsClient) Update() *PatientrightsUpdate {
	mutation := newPatientrightsMutation(c.config, OpUpdate)
	return &PatientrightsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PatientrightsClient) UpdateOne(pa *Patientrights) *PatientrightsUpdateOne {
	mutation := newPatientrightsMutation(c.config, OpUpdateOne, withPatientrights(pa))
	return &PatientrightsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PatientrightsClient) UpdateOneID(id int) *PatientrightsUpdateOne {
	mutation := newPatientrightsMutation(c.config, OpUpdateOne, withPatientrightsID(id))
	return &PatientrightsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Patientrights.
func (c *PatientrightsClient) Delete() *PatientrightsDelete {
	mutation := newPatientrightsMutation(c.config, OpDelete)
	return &PatientrightsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PatientrightsClient) DeleteOne(pa *Patientrights) *PatientrightsDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PatientrightsClient) DeleteOneID(id int) *PatientrightsDeleteOne {
	builder := c.Delete().Where(patientrights.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PatientrightsDeleteOne{builder}
}

// Create returns a query builder for Patientrights.
func (c *PatientrightsClient) Query() *PatientrightsQuery {
	return &PatientrightsQuery{config: c.config}
}

// Get returns a Patientrights entity by its id.
func (c *PatientrightsClient) Get(ctx context.Context, id int) (*Patientrights, error) {
	return c.Query().Where(patientrights.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PatientrightsClient) GetX(ctx context.Context, id int) *Patientrights {
	pa, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pa
}

// QueryPatientrightsPatientrightstype queries the PatientrightsPatientrightstype edge of a Patientrights.
func (c *PatientrightsClient) QueryPatientrightsPatientrightstype(pa *Patientrights) *PatientrightstypeQuery {
	query := &PatientrightstypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patientrights.Table, patientrights.FieldID, id),
			sqlgraph.To(patientrightstype.Table, patientrightstype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, patientrights.PatientrightsPatientrightstypeTable, patientrights.PatientrightsPatientrightstypeColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatientrightsInsurance queries the PatientrightsInsurance edge of a Patientrights.
func (c *PatientrightsClient) QueryPatientrightsInsurance(pa *Patientrights) *InsuranceQuery {
	query := &InsuranceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patientrights.Table, patientrights.FieldID, id),
			sqlgraph.To(insurance.Table, insurance.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, patientrights.PatientrightsInsuranceTable, patientrights.PatientrightsInsuranceColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatientrightsPatientrecord queries the PatientrightsPatientrecord edge of a Patientrights.
func (c *PatientrightsClient) QueryPatientrightsPatientrecord(pa *Patientrights) *PatientrecordQuery {
	query := &PatientrecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patientrights.Table, patientrights.FieldID, id),
			sqlgraph.To(patientrecord.Table, patientrecord.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, patientrights.PatientrightsPatientrecordTable, patientrights.PatientrightsPatientrecordColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatientrightsMedicalrecordstaff queries the PatientrightsMedicalrecordstaff edge of a Patientrights.
func (c *PatientrightsClient) QueryPatientrightsMedicalrecordstaff(pa *Patientrights) *MedicalrecordstaffQuery {
	query := &MedicalrecordstaffQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patientrights.Table, patientrights.FieldID, id),
			sqlgraph.To(medicalrecordstaff.Table, medicalrecordstaff.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, patientrights.PatientrightsMedicalrecordstaffTable, patientrights.PatientrightsMedicalrecordstaffColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PatientrightsClient) Hooks() []Hook {
	return c.hooks.Patientrights
}

// PatientrightstypeClient is a client for the Patientrightstype schema.
type PatientrightstypeClient struct {
	config
}

// NewPatientrightstypeClient returns a client for the Patientrightstype from the given config.
func NewPatientrightstypeClient(c config) *PatientrightstypeClient {
	return &PatientrightstypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `patientrightstype.Hooks(f(g(h())))`.
func (c *PatientrightstypeClient) Use(hooks ...Hook) {
	c.hooks.Patientrightstype = append(c.hooks.Patientrightstype, hooks...)
}

// Create returns a create builder for Patientrightstype.
func (c *PatientrightstypeClient) Create() *PatientrightstypeCreate {
	mutation := newPatientrightstypeMutation(c.config, OpCreate)
	return &PatientrightstypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Patientrightstype.
func (c *PatientrightstypeClient) Update() *PatientrightstypeUpdate {
	mutation := newPatientrightstypeMutation(c.config, OpUpdate)
	return &PatientrightstypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PatientrightstypeClient) UpdateOne(pa *Patientrightstype) *PatientrightstypeUpdateOne {
	mutation := newPatientrightstypeMutation(c.config, OpUpdateOne, withPatientrightstype(pa))
	return &PatientrightstypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PatientrightstypeClient) UpdateOneID(id int) *PatientrightstypeUpdateOne {
	mutation := newPatientrightstypeMutation(c.config, OpUpdateOne, withPatientrightstypeID(id))
	return &PatientrightstypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Patientrightstype.
func (c *PatientrightstypeClient) Delete() *PatientrightstypeDelete {
	mutation := newPatientrightstypeMutation(c.config, OpDelete)
	return &PatientrightstypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PatientrightstypeClient) DeleteOne(pa *Patientrightstype) *PatientrightstypeDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PatientrightstypeClient) DeleteOneID(id int) *PatientrightstypeDeleteOne {
	builder := c.Delete().Where(patientrightstype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PatientrightstypeDeleteOne{builder}
}

// Create returns a query builder for Patientrightstype.
func (c *PatientrightstypeClient) Query() *PatientrightstypeQuery {
	return &PatientrightstypeQuery{config: c.config}
}

// Get returns a Patientrightstype entity by its id.
func (c *PatientrightstypeClient) Get(ctx context.Context, id int) (*Patientrightstype, error) {
	return c.Query().Where(patientrightstype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PatientrightstypeClient) GetX(ctx context.Context, id int) *Patientrightstype {
	pa, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pa
}

// QueryPatientrightstypePatientrights queries the PatientrightstypePatientrights edge of a Patientrightstype.
func (c *PatientrightstypeClient) QueryPatientrightstypePatientrights(pa *Patientrightstype) *PatientrightsQuery {
	query := &PatientrightsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patientrightstype.Table, patientrightstype.FieldID, id),
			sqlgraph.To(patientrights.Table, patientrights.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, patientrightstype.PatientrightstypePatientrightsTable, patientrightstype.PatientrightstypePatientrightsColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatientrightstypeAbilitypatientrights queries the PatientrightstypeAbilitypatientrights edge of a Patientrightstype.
func (c *PatientrightstypeClient) QueryPatientrightstypeAbilitypatientrights(pa *Patientrightstype) *AbilitypatientrightsQuery {
	query := &AbilitypatientrightsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patientrightstype.Table, patientrightstype.FieldID, id),
			sqlgraph.To(abilitypatientrights.Table, abilitypatientrights.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, patientrightstype.PatientrightstypeAbilitypatientrightsTable, patientrightstype.PatientrightstypeAbilitypatientrightsColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PatientrightstypeClient) Hooks() []Hook {
	return c.hooks.Patientrightstype
}
