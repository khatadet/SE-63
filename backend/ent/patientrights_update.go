// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/PON/app/ent/insurance"
	"github.com/PON/app/ent/medicalrecordstaff"
	"github.com/PON/app/ent/patientrecord"
	"github.com/PON/app/ent/patientrights"
	"github.com/PON/app/ent/patientrightstype"
	"github.com/PON/app/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// PatientrightsUpdate is the builder for updating Patientrights entities.
type PatientrightsUpdate struct {
	config
	hooks      []Hook
	mutation   *PatientrightsMutation
	predicates []predicate.Patientrights
}

// Where adds a new predicate for the builder.
func (pu *PatientrightsUpdate) Where(ps ...predicate.Patientrights) *PatientrightsUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetPermissionDate sets the PermissionDate field.
func (pu *PatientrightsUpdate) SetPermissionDate(s string) *PatientrightsUpdate {
	pu.mutation.SetPermissionDate(s)
	return pu
}

// SetPatientrightsPatientrightstypeID sets the PatientrightsPatientrightstype edge to Patientrightstype by id.
func (pu *PatientrightsUpdate) SetPatientrightsPatientrightstypeID(id int) *PatientrightsUpdate {
	pu.mutation.SetPatientrightsPatientrightstypeID(id)
	return pu
}

// SetNillablePatientrightsPatientrightstypeID sets the PatientrightsPatientrightstype edge to Patientrightstype by id if the given value is not nil.
func (pu *PatientrightsUpdate) SetNillablePatientrightsPatientrightstypeID(id *int) *PatientrightsUpdate {
	if id != nil {
		pu = pu.SetPatientrightsPatientrightstypeID(*id)
	}
	return pu
}

// SetPatientrightsPatientrightstype sets the PatientrightsPatientrightstype edge to Patientrightstype.
func (pu *PatientrightsUpdate) SetPatientrightsPatientrightstype(p *Patientrightstype) *PatientrightsUpdate {
	return pu.SetPatientrightsPatientrightstypeID(p.ID)
}

// SetPatientrightsInsuranceID sets the PatientrightsInsurance edge to Insurance by id.
func (pu *PatientrightsUpdate) SetPatientrightsInsuranceID(id int) *PatientrightsUpdate {
	pu.mutation.SetPatientrightsInsuranceID(id)
	return pu
}

// SetNillablePatientrightsInsuranceID sets the PatientrightsInsurance edge to Insurance by id if the given value is not nil.
func (pu *PatientrightsUpdate) SetNillablePatientrightsInsuranceID(id *int) *PatientrightsUpdate {
	if id != nil {
		pu = pu.SetPatientrightsInsuranceID(*id)
	}
	return pu
}

// SetPatientrightsInsurance sets the PatientrightsInsurance edge to Insurance.
func (pu *PatientrightsUpdate) SetPatientrightsInsurance(i *Insurance) *PatientrightsUpdate {
	return pu.SetPatientrightsInsuranceID(i.ID)
}

// SetPatientrightsPatientrecordID sets the PatientrightsPatientrecord edge to Patientrecord by id.
func (pu *PatientrightsUpdate) SetPatientrightsPatientrecordID(id int) *PatientrightsUpdate {
	pu.mutation.SetPatientrightsPatientrecordID(id)
	return pu
}

// SetNillablePatientrightsPatientrecordID sets the PatientrightsPatientrecord edge to Patientrecord by id if the given value is not nil.
func (pu *PatientrightsUpdate) SetNillablePatientrightsPatientrecordID(id *int) *PatientrightsUpdate {
	if id != nil {
		pu = pu.SetPatientrightsPatientrecordID(*id)
	}
	return pu
}

// SetPatientrightsPatientrecord sets the PatientrightsPatientrecord edge to Patientrecord.
func (pu *PatientrightsUpdate) SetPatientrightsPatientrecord(p *Patientrecord) *PatientrightsUpdate {
	return pu.SetPatientrightsPatientrecordID(p.ID)
}

// SetPatientrightsMedicalrecordstaffID sets the PatientrightsMedicalrecordstaff edge to Medicalrecordstaff by id.
func (pu *PatientrightsUpdate) SetPatientrightsMedicalrecordstaffID(id int) *PatientrightsUpdate {
	pu.mutation.SetPatientrightsMedicalrecordstaffID(id)
	return pu
}

// SetNillablePatientrightsMedicalrecordstaffID sets the PatientrightsMedicalrecordstaff edge to Medicalrecordstaff by id if the given value is not nil.
func (pu *PatientrightsUpdate) SetNillablePatientrightsMedicalrecordstaffID(id *int) *PatientrightsUpdate {
	if id != nil {
		pu = pu.SetPatientrightsMedicalrecordstaffID(*id)
	}
	return pu
}

// SetPatientrightsMedicalrecordstaff sets the PatientrightsMedicalrecordstaff edge to Medicalrecordstaff.
func (pu *PatientrightsUpdate) SetPatientrightsMedicalrecordstaff(m *Medicalrecordstaff) *PatientrightsUpdate {
	return pu.SetPatientrightsMedicalrecordstaffID(m.ID)
}

// Mutation returns the PatientrightsMutation object of the builder.
func (pu *PatientrightsUpdate) Mutation() *PatientrightsMutation {
	return pu.mutation
}

// ClearPatientrightsPatientrightstype clears the PatientrightsPatientrightstype edge to Patientrightstype.
func (pu *PatientrightsUpdate) ClearPatientrightsPatientrightstype() *PatientrightsUpdate {
	pu.mutation.ClearPatientrightsPatientrightstype()
	return pu
}

// ClearPatientrightsInsurance clears the PatientrightsInsurance edge to Insurance.
func (pu *PatientrightsUpdate) ClearPatientrightsInsurance() *PatientrightsUpdate {
	pu.mutation.ClearPatientrightsInsurance()
	return pu
}

// ClearPatientrightsPatientrecord clears the PatientrightsPatientrecord edge to Patientrecord.
func (pu *PatientrightsUpdate) ClearPatientrightsPatientrecord() *PatientrightsUpdate {
	pu.mutation.ClearPatientrightsPatientrecord()
	return pu
}

// ClearPatientrightsMedicalrecordstaff clears the PatientrightsMedicalrecordstaff edge to Medicalrecordstaff.
func (pu *PatientrightsUpdate) ClearPatientrightsMedicalrecordstaff() *PatientrightsUpdate {
	pu.mutation.ClearPatientrightsMedicalrecordstaff()
	return pu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *PatientrightsUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PatientrightsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PatientrightsUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PatientrightsUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PatientrightsUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PatientrightsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   patientrights.Table,
			Columns: patientrights.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: patientrights.FieldID,
			},
		},
	}
	if ps := pu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.PermissionDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patientrights.FieldPermissionDate,
		})
	}
	if pu.mutation.PatientrightsPatientrightstypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrights.PatientrightsPatientrightstypeTable,
			Columns: []string{patientrights.PatientrightsPatientrightstypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patientrightstype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PatientrightsPatientrightstypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrights.PatientrightsPatientrightstypeTable,
			Columns: []string{patientrights.PatientrightsPatientrightstypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patientrightstype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PatientrightsInsuranceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrights.PatientrightsInsuranceTable,
			Columns: []string{patientrights.PatientrightsInsuranceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: insurance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PatientrightsInsuranceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrights.PatientrightsInsuranceTable,
			Columns: []string{patientrights.PatientrightsInsuranceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: insurance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PatientrightsPatientrecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrights.PatientrightsPatientrecordTable,
			Columns: []string{patientrights.PatientrightsPatientrecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patientrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PatientrightsPatientrecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrights.PatientrightsPatientrecordTable,
			Columns: []string{patientrights.PatientrightsPatientrecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patientrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PatientrightsMedicalrecordstaffCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrights.PatientrightsMedicalrecordstaffTable,
			Columns: []string{patientrights.PatientrightsMedicalrecordstaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalrecordstaff.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PatientrightsMedicalrecordstaffIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrights.PatientrightsMedicalrecordstaffTable,
			Columns: []string{patientrights.PatientrightsMedicalrecordstaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalrecordstaff.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{patientrights.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PatientrightsUpdateOne is the builder for updating a single Patientrights entity.
type PatientrightsUpdateOne struct {
	config
	hooks    []Hook
	mutation *PatientrightsMutation
}

// SetPermissionDate sets the PermissionDate field.
func (puo *PatientrightsUpdateOne) SetPermissionDate(s string) *PatientrightsUpdateOne {
	puo.mutation.SetPermissionDate(s)
	return puo
}

// SetPatientrightsPatientrightstypeID sets the PatientrightsPatientrightstype edge to Patientrightstype by id.
func (puo *PatientrightsUpdateOne) SetPatientrightsPatientrightstypeID(id int) *PatientrightsUpdateOne {
	puo.mutation.SetPatientrightsPatientrightstypeID(id)
	return puo
}

// SetNillablePatientrightsPatientrightstypeID sets the PatientrightsPatientrightstype edge to Patientrightstype by id if the given value is not nil.
func (puo *PatientrightsUpdateOne) SetNillablePatientrightsPatientrightstypeID(id *int) *PatientrightsUpdateOne {
	if id != nil {
		puo = puo.SetPatientrightsPatientrightstypeID(*id)
	}
	return puo
}

// SetPatientrightsPatientrightstype sets the PatientrightsPatientrightstype edge to Patientrightstype.
func (puo *PatientrightsUpdateOne) SetPatientrightsPatientrightstype(p *Patientrightstype) *PatientrightsUpdateOne {
	return puo.SetPatientrightsPatientrightstypeID(p.ID)
}

// SetPatientrightsInsuranceID sets the PatientrightsInsurance edge to Insurance by id.
func (puo *PatientrightsUpdateOne) SetPatientrightsInsuranceID(id int) *PatientrightsUpdateOne {
	puo.mutation.SetPatientrightsInsuranceID(id)
	return puo
}

// SetNillablePatientrightsInsuranceID sets the PatientrightsInsurance edge to Insurance by id if the given value is not nil.
func (puo *PatientrightsUpdateOne) SetNillablePatientrightsInsuranceID(id *int) *PatientrightsUpdateOne {
	if id != nil {
		puo = puo.SetPatientrightsInsuranceID(*id)
	}
	return puo
}

// SetPatientrightsInsurance sets the PatientrightsInsurance edge to Insurance.
func (puo *PatientrightsUpdateOne) SetPatientrightsInsurance(i *Insurance) *PatientrightsUpdateOne {
	return puo.SetPatientrightsInsuranceID(i.ID)
}

// SetPatientrightsPatientrecordID sets the PatientrightsPatientrecord edge to Patientrecord by id.
func (puo *PatientrightsUpdateOne) SetPatientrightsPatientrecordID(id int) *PatientrightsUpdateOne {
	puo.mutation.SetPatientrightsPatientrecordID(id)
	return puo
}

// SetNillablePatientrightsPatientrecordID sets the PatientrightsPatientrecord edge to Patientrecord by id if the given value is not nil.
func (puo *PatientrightsUpdateOne) SetNillablePatientrightsPatientrecordID(id *int) *PatientrightsUpdateOne {
	if id != nil {
		puo = puo.SetPatientrightsPatientrecordID(*id)
	}
	return puo
}

// SetPatientrightsPatientrecord sets the PatientrightsPatientrecord edge to Patientrecord.
func (puo *PatientrightsUpdateOne) SetPatientrightsPatientrecord(p *Patientrecord) *PatientrightsUpdateOne {
	return puo.SetPatientrightsPatientrecordID(p.ID)
}

// SetPatientrightsMedicalrecordstaffID sets the PatientrightsMedicalrecordstaff edge to Medicalrecordstaff by id.
func (puo *PatientrightsUpdateOne) SetPatientrightsMedicalrecordstaffID(id int) *PatientrightsUpdateOne {
	puo.mutation.SetPatientrightsMedicalrecordstaffID(id)
	return puo
}

// SetNillablePatientrightsMedicalrecordstaffID sets the PatientrightsMedicalrecordstaff edge to Medicalrecordstaff by id if the given value is not nil.
func (puo *PatientrightsUpdateOne) SetNillablePatientrightsMedicalrecordstaffID(id *int) *PatientrightsUpdateOne {
	if id != nil {
		puo = puo.SetPatientrightsMedicalrecordstaffID(*id)
	}
	return puo
}

// SetPatientrightsMedicalrecordstaff sets the PatientrightsMedicalrecordstaff edge to Medicalrecordstaff.
func (puo *PatientrightsUpdateOne) SetPatientrightsMedicalrecordstaff(m *Medicalrecordstaff) *PatientrightsUpdateOne {
	return puo.SetPatientrightsMedicalrecordstaffID(m.ID)
}

// Mutation returns the PatientrightsMutation object of the builder.
func (puo *PatientrightsUpdateOne) Mutation() *PatientrightsMutation {
	return puo.mutation
}

// ClearPatientrightsPatientrightstype clears the PatientrightsPatientrightstype edge to Patientrightstype.
func (puo *PatientrightsUpdateOne) ClearPatientrightsPatientrightstype() *PatientrightsUpdateOne {
	puo.mutation.ClearPatientrightsPatientrightstype()
	return puo
}

// ClearPatientrightsInsurance clears the PatientrightsInsurance edge to Insurance.
func (puo *PatientrightsUpdateOne) ClearPatientrightsInsurance() *PatientrightsUpdateOne {
	puo.mutation.ClearPatientrightsInsurance()
	return puo
}

// ClearPatientrightsPatientrecord clears the PatientrightsPatientrecord edge to Patientrecord.
func (puo *PatientrightsUpdateOne) ClearPatientrightsPatientrecord() *PatientrightsUpdateOne {
	puo.mutation.ClearPatientrightsPatientrecord()
	return puo
}

// ClearPatientrightsMedicalrecordstaff clears the PatientrightsMedicalrecordstaff edge to Medicalrecordstaff.
func (puo *PatientrightsUpdateOne) ClearPatientrightsMedicalrecordstaff() *PatientrightsUpdateOne {
	puo.mutation.ClearPatientrightsMedicalrecordstaff()
	return puo
}

// Save executes the query and returns the updated entity.
func (puo *PatientrightsUpdateOne) Save(ctx context.Context) (*Patientrights, error) {

	var (
		err  error
		node *Patientrights
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PatientrightsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PatientrightsUpdateOne) SaveX(ctx context.Context) *Patientrights {
	pa, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pa
}

// Exec executes the query on the entity.
func (puo *PatientrightsUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PatientrightsUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PatientrightsUpdateOne) sqlSave(ctx context.Context) (pa *Patientrights, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   patientrights.Table,
			Columns: patientrights.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: patientrights.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Patientrights.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := puo.mutation.PermissionDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patientrights.FieldPermissionDate,
		})
	}
	if puo.mutation.PatientrightsPatientrightstypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrights.PatientrightsPatientrightstypeTable,
			Columns: []string{patientrights.PatientrightsPatientrightstypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patientrightstype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PatientrightsPatientrightstypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrights.PatientrightsPatientrightstypeTable,
			Columns: []string{patientrights.PatientrightsPatientrightstypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patientrightstype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PatientrightsInsuranceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrights.PatientrightsInsuranceTable,
			Columns: []string{patientrights.PatientrightsInsuranceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: insurance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PatientrightsInsuranceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrights.PatientrightsInsuranceTable,
			Columns: []string{patientrights.PatientrightsInsuranceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: insurance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PatientrightsPatientrecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrights.PatientrightsPatientrecordTable,
			Columns: []string{patientrights.PatientrightsPatientrecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patientrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PatientrightsPatientrecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrights.PatientrightsPatientrecordTable,
			Columns: []string{patientrights.PatientrightsPatientrecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patientrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PatientrightsMedicalrecordstaffCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrights.PatientrightsMedicalrecordstaffTable,
			Columns: []string{patientrights.PatientrightsMedicalrecordstaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalrecordstaff.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PatientrightsMedicalrecordstaffIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrights.PatientrightsMedicalrecordstaffTable,
			Columns: []string{patientrights.PatientrightsMedicalrecordstaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalrecordstaff.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	pa = &Patientrights{config: puo.config}
	_spec.Assign = pa.assignValues
	_spec.ScanValues = pa.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{patientrights.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pa, nil
}
