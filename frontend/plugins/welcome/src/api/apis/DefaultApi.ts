/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersPatientrights,
    ControllersPatientrightsFromJSON,
    ControllersPatientrightsToJSON,
    EntAbilitypatientrights,
    EntAbilitypatientrightsFromJSON,
    EntAbilitypatientrightsToJSON,
    EntInsurance,
    EntInsuranceFromJSON,
    EntInsuranceToJSON,
    EntMedicalrecordstaff,
    EntMedicalrecordstaffFromJSON,
    EntMedicalrecordstaffToJSON,
    EntPatientrecord,
    EntPatientrecordFromJSON,
    EntPatientrecordToJSON,
    EntPatientrights,
    EntPatientrightsFromJSON,
    EntPatientrightsToJSON,
    EntPatientrightstype,
    EntPatientrightstypeFromJSON,
    EntPatientrightstypeToJSON,
} from '../models';

export interface CreateAbilitypatientrightsRequest {
    abilitypatientrights: EntAbilitypatientrights;
}

export interface CreateInsuranceRequest {
    insurance: EntInsurance;
}

export interface CreateMedicalrecordstaffRequest {
    medicalrecordstaff: EntMedicalrecordstaff;
}

export interface CreatePatientrecordRequest {
    patientrecord: EntPatientrecord;
}

export interface CreatePatientrightsRequest {
    patientrights: ControllersPatientrights;
}

export interface CreatePatientrightstypeRequest {
    patientrightstype: EntPatientrightstype;
}

export interface DeleteAbilitypatientrightsRequest {
    id: number;
}

export interface DeleteMedicalrecordstaffRequest {
    id: number;
}

export interface DeletePatientrecordRequest {
    id: number;
}

export interface DeletePatientrightsRequest {
    id: number;
}

export interface DeletePatientrightstypeRequest {
    id: number;
}

export interface GetAbilitypatientrightsRequest {
    id: number;
}

export interface GetInsuranceRequest {
    id: number;
}

export interface GetMedicalrecordstaffRequest {
    id: number;
}

export interface GetPatientrecordRequest {
    id: number;
}

export interface GetPatientrightsRequest {
    id: number;
}

export interface GetPatientrightstypeRequest {
    id: number;
}

export interface ListAbilitypatientrightsRequest {
    limit?: number;
    offset?: number;
}

export interface ListInsuranceRequest {
    limit?: number;
    offset?: number;
}

export interface ListMedicalrecordstaffRequest {
    limit?: number;
    offset?: number;
}

export interface ListPatientrecordRequest {
    limit?: number;
    offset?: number;
}

export interface ListPatientrightsRequest {
    limit?: number;
    offset?: number;
}

export interface ListPatientrightstypeRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateAbilitypatientrightsRequest {
    id: number;
    abilitypatientrights: EntAbilitypatientrights;
}

export interface UpdateInsuranceRequest {
    id: number;
    insurance: EntInsurance;
}

export interface UpdateMedicalrecordstaffRequest {
    id: number;
    medicalrecordstaff: EntMedicalrecordstaff;
}

export interface UpdatePatientrecordRequest {
    id: number;
    patientrecord: EntPatientrecord;
}

export interface UpdatePatientrightstypeRequest {
    id: number;
    patientrightstype: EntPatientrightstype;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create abilitypatientrights
     * Create abilitypatientrights
     */
    async createAbilitypatientrightsRaw(requestParameters: CreateAbilitypatientrightsRequest): Promise<runtime.ApiResponse<EntAbilitypatientrights>> {
        if (requestParameters.abilitypatientrights === null || requestParameters.abilitypatientrights === undefined) {
            throw new runtime.RequiredError('abilitypatientrights','Required parameter requestParameters.abilitypatientrights was null or undefined when calling createAbilitypatientrights.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/abilitypatientrightss`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntAbilitypatientrightsToJSON(requestParameters.abilitypatientrights),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAbilitypatientrightsFromJSON(jsonValue));
    }

    /**
     * Create abilitypatientrights
     * Create abilitypatientrights
     */
    async createAbilitypatientrights(requestParameters: CreateAbilitypatientrightsRequest): Promise<EntAbilitypatientrights> {
        const response = await this.createAbilitypatientrightsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create Insurance
     * Create Insurance
     */
    async createInsuranceRaw(requestParameters: CreateInsuranceRequest): Promise<runtime.ApiResponse<EntInsurance>> {
        if (requestParameters.insurance === null || requestParameters.insurance === undefined) {
            throw new runtime.RequiredError('insurance','Required parameter requestParameters.insurance was null or undefined when calling createInsurance.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Insurances`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntInsuranceToJSON(requestParameters.insurance),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntInsuranceFromJSON(jsonValue));
    }

    /**
     * Create Insurance
     * Create Insurance
     */
    async createInsurance(requestParameters: CreateInsuranceRequest): Promise<EntInsurance> {
        const response = await this.createInsuranceRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create medicalrecordstaff
     * Create medicalrecordstaff
     */
    async createMedicalrecordstaffRaw(requestParameters: CreateMedicalrecordstaffRequest): Promise<runtime.ApiResponse<EntMedicalrecordstaff>> {
        if (requestParameters.medicalrecordstaff === null || requestParameters.medicalrecordstaff === undefined) {
            throw new runtime.RequiredError('medicalrecordstaff','Required parameter requestParameters.medicalrecordstaff was null or undefined when calling createMedicalrecordstaff.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/medicalrecordstaffs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntMedicalrecordstaffToJSON(requestParameters.medicalrecordstaff),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMedicalrecordstaffFromJSON(jsonValue));
    }

    /**
     * Create medicalrecordstaff
     * Create medicalrecordstaff
     */
    async createMedicalrecordstaff(requestParameters: CreateMedicalrecordstaffRequest): Promise<EntMedicalrecordstaff> {
        const response = await this.createMedicalrecordstaffRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create patientrecord
     * Create patientrecord
     */
    async createPatientrecordRaw(requestParameters: CreatePatientrecordRequest): Promise<runtime.ApiResponse<EntPatientrecord>> {
        if (requestParameters.patientrecord === null || requestParameters.patientrecord === undefined) {
            throw new runtime.RequiredError('patientrecord','Required parameter requestParameters.patientrecord was null or undefined when calling createPatientrecord.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patientrecords`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPatientrecordToJSON(requestParameters.patientrecord),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientrecordFromJSON(jsonValue));
    }

    /**
     * Create patientrecord
     * Create patientrecord
     */
    async createPatientrecord(requestParameters: CreatePatientrecordRequest): Promise<EntPatientrecord> {
        const response = await this.createPatientrecordRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create Patientrights
     * Create Patientrights
     */
    async createPatientrightsRaw(requestParameters: CreatePatientrightsRequest): Promise<runtime.ApiResponse<ControllersPatientrights>> {
        if (requestParameters.patientrights === null || requestParameters.patientrights === undefined) {
            throw new runtime.RequiredError('patientrights','Required parameter requestParameters.patientrights was null or undefined when calling createPatientrights.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patientrightss`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersPatientrightsToJSON(requestParameters.patientrights),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersPatientrightsFromJSON(jsonValue));
    }

    /**
     * Create Patientrights
     * Create Patientrights
     */
    async createPatientrights(requestParameters: CreatePatientrightsRequest): Promise<ControllersPatientrights> {
        const response = await this.createPatientrightsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create patientrightstype
     * Create patientrightstype
     */
    async createPatientrightstypeRaw(requestParameters: CreatePatientrightstypeRequest): Promise<runtime.ApiResponse<EntPatientrightstype>> {
        if (requestParameters.patientrightstype === null || requestParameters.patientrightstype === undefined) {
            throw new runtime.RequiredError('patientrightstype','Required parameter requestParameters.patientrightstype was null or undefined when calling createPatientrightstype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patientrightstypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPatientrightstypeToJSON(requestParameters.patientrightstype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientrightstypeFromJSON(jsonValue));
    }

    /**
     * Create patientrightstype
     * Create patientrightstype
     */
    async createPatientrightstype(requestParameters: CreatePatientrightstypeRequest): Promise<EntPatientrightstype> {
        const response = await this.createPatientrightstypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get abilitypatientrights by ID
     * Delete a abilitypatientrights entity by ID
     */
    async deleteAbilitypatientrightsRaw(requestParameters: DeleteAbilitypatientrightsRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAbilitypatientrights.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/abilitypatientrightss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get abilitypatientrights by ID
     * Delete a abilitypatientrights entity by ID
     */
    async deleteAbilitypatientrights(requestParameters: DeleteAbilitypatientrightsRequest): Promise<object> {
        const response = await this.deleteAbilitypatientrightsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get medicalrecordstaff by ID
     * Delete a medicalrecordstaff entity by ID
     */
    async deleteMedicalrecordstaffRaw(requestParameters: DeleteMedicalrecordstaffRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteMedicalrecordstaff.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/medicalrecordstaffs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get medicalrecordstaff by ID
     * Delete a medicalrecordstaff entity by ID
     */
    async deleteMedicalrecordstaff(requestParameters: DeleteMedicalrecordstaffRequest): Promise<object> {
        const response = await this.deleteMedicalrecordstaffRaw(requestParameters);
        return await response.value();
    }

    /**
     * get patientrecord by ID
     * Delete a patientrecord entity by ID
     */
    async deletePatientrecordRaw(requestParameters: DeletePatientrecordRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePatientrecord.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patientrecords/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get patientrecord by ID
     * Delete a patientrecord entity by ID
     */
    async deletePatientrecord(requestParameters: DeletePatientrecordRequest): Promise<object> {
        const response = await this.deletePatientrecordRaw(requestParameters);
        return await response.value();
    }

    /**
     * get patientrights by ID
     * Delete a patientrights entity by ID
     */
    async deletePatientrightsRaw(requestParameters: DeletePatientrightsRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePatientrights.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patientrightss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get patientrights by ID
     * Delete a patientrights entity by ID
     */
    async deletePatientrights(requestParameters: DeletePatientrightsRequest): Promise<object> {
        const response = await this.deletePatientrightsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get patientrightstype by ID
     * Delete a patientrightstype entity by ID
     */
    async deletePatientrightstypeRaw(requestParameters: DeletePatientrightstypeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePatientrightstype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patientrightstypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get patientrightstype by ID
     * Delete a patientrightstype entity by ID
     */
    async deletePatientrightstype(requestParameters: DeletePatientrightstypeRequest): Promise<object> {
        const response = await this.deletePatientrightstypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get abilitypatientrights by ID
     * Get a abilitypatientrights entity by ID
     */
    async getAbilitypatientrightsRaw(requestParameters: GetAbilitypatientrightsRequest): Promise<runtime.ApiResponse<EntAbilitypatientrights>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAbilitypatientrights.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/abilitypatientrightss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAbilitypatientrightsFromJSON(jsonValue));
    }

    /**
     * get abilitypatientrights by ID
     * Get a abilitypatientrights entity by ID
     */
    async getAbilitypatientrights(requestParameters: GetAbilitypatientrightsRequest): Promise<EntAbilitypatientrights> {
        const response = await this.getAbilitypatientrightsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get Insurance by ID
     * Get a Insurance entity by ID
     */
    async getInsuranceRaw(requestParameters: GetInsuranceRequest): Promise<runtime.ApiResponse<EntInsurance>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getInsurance.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/insurances/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntInsuranceFromJSON(jsonValue));
    }

    /**
     * get Insurance by ID
     * Get a Insurance entity by ID
     */
    async getInsurance(requestParameters: GetInsuranceRequest): Promise<EntInsurance> {
        const response = await this.getInsuranceRaw(requestParameters);
        return await response.value();
    }

    /**
     * get medicalrecordstaff by ID
     * Get a medicalrecordstaff entity by ID
     */
    async getMedicalrecordstaffRaw(requestParameters: GetMedicalrecordstaffRequest): Promise<runtime.ApiResponse<EntMedicalrecordstaff>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMedicalrecordstaff.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/medicalrecordstaffs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMedicalrecordstaffFromJSON(jsonValue));
    }

    /**
     * get medicalrecordstaff by ID
     * Get a medicalrecordstaff entity by ID
     */
    async getMedicalrecordstaff(requestParameters: GetMedicalrecordstaffRequest): Promise<EntMedicalrecordstaff> {
        const response = await this.getMedicalrecordstaffRaw(requestParameters);
        return await response.value();
    }

    /**
     * get patientrecord by ID
     * Get a patientrecord entity by ID
     */
    async getPatientrecordRaw(requestParameters: GetPatientrecordRequest): Promise<runtime.ApiResponse<EntPatientrecord>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPatientrecord.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patientrecords/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientrecordFromJSON(jsonValue));
    }

    /**
     * get patientrecord by ID
     * Get a patientrecord entity by ID
     */
    async getPatientrecord(requestParameters: GetPatientrecordRequest): Promise<EntPatientrecord> {
        const response = await this.getPatientrecordRaw(requestParameters);
        return await response.value();
    }

    /**
     * get Patientrights by ID
     * Get a Patientrights entity by ID
     */
    async getPatientrightsRaw(requestParameters: GetPatientrightsRequest): Promise<runtime.ApiResponse<EntPatientrights>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPatientrights.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patientrightss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientrightsFromJSON(jsonValue));
    }

    /**
     * get Patientrights by ID
     * Get a Patientrights entity by ID
     */
    async getPatientrights(requestParameters: GetPatientrightsRequest): Promise<EntPatientrights> {
        const response = await this.getPatientrightsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get patientrightstype by ID
     * Get a patientrightstype entity by ID
     */
    async getPatientrightstypeRaw(requestParameters: GetPatientrightstypeRequest): Promise<runtime.ApiResponse<EntPatientrightstype>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPatientrightstype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patientrightstypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientrightstypeFromJSON(jsonValue));
    }

    /**
     * get patientrightstype by ID
     * Get a patientrightstype entity by ID
     */
    async getPatientrightstype(requestParameters: GetPatientrightstypeRequest): Promise<EntPatientrightstype> {
        const response = await this.getPatientrightstypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list abilitypatientrights entities
     * List abilitypatientrights entities
     */
    async listAbilitypatientrightsRaw(requestParameters: ListAbilitypatientrightsRequest): Promise<runtime.ApiResponse<Array<EntAbilitypatientrights>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/abilitypatientrightss`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntAbilitypatientrightsFromJSON));
    }

    /**
     * list abilitypatientrights entities
     * List abilitypatientrights entities
     */
    async listAbilitypatientrights(requestParameters: ListAbilitypatientrightsRequest): Promise<Array<EntAbilitypatientrights>> {
        const response = await this.listAbilitypatientrightsRaw(requestParameters);
        return await response.value();
    }

    /**
     * list insurance entities
     * List insurance entities
     */
    async listInsuranceRaw(requestParameters: ListInsuranceRequest): Promise<runtime.ApiResponse<Array<EntInsurance>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/insurances`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntInsuranceFromJSON));
    }

    /**
     * list insurance entities
     * List insurance entities
     */
    async listInsurance(requestParameters: ListInsuranceRequest): Promise<Array<EntInsurance>> {
        const response = await this.listInsuranceRaw(requestParameters);
        return await response.value();
    }

    /**
     * list medicalrecordstaff entities
     * List medicalrecordstaff entities
     */
    async listMedicalrecordstaffRaw(requestParameters: ListMedicalrecordstaffRequest): Promise<runtime.ApiResponse<Array<EntMedicalrecordstaff>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/medicalrecordstaffs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntMedicalrecordstaffFromJSON));
    }

    /**
     * list medicalrecordstaff entities
     * List medicalrecordstaff entities
     */
    async listMedicalrecordstaff(requestParameters: ListMedicalrecordstaffRequest): Promise<Array<EntMedicalrecordstaff>> {
        const response = await this.listMedicalrecordstaffRaw(requestParameters);
        return await response.value();
    }

    /**
     * list patientrecord entities
     * List patientrecord entities
     */
    async listPatientrecordRaw(requestParameters: ListPatientrecordRequest): Promise<runtime.ApiResponse<Array<EntPatientrecord>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patientrecords`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPatientrecordFromJSON));
    }

    /**
     * list patientrecord entities
     * List patientrecord entities
     */
    async listPatientrecord(requestParameters: ListPatientrecordRequest): Promise<Array<EntPatientrecord>> {
        const response = await this.listPatientrecordRaw(requestParameters);
        return await response.value();
    }

    /**
     * list patientrights entities
     * List patientrights entities
     */
    async listPatientrightsRaw(requestParameters: ListPatientrightsRequest): Promise<runtime.ApiResponse<Array<EntPatientrights>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patientrightss`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPatientrightsFromJSON));
    }

    /**
     * list patientrights entities
     * List patientrights entities
     */
    async listPatientrights(requestParameters: ListPatientrightsRequest): Promise<Array<EntPatientrights>> {
        const response = await this.listPatientrightsRaw(requestParameters);
        return await response.value();
    }

    /**
     * list patientrightstype entities
     * List patientrightstype entities
     */
    async listPatientrightstypeRaw(requestParameters: ListPatientrightstypeRequest): Promise<runtime.ApiResponse<Array<EntPatientrightstype>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patientrightstypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPatientrightstypeFromJSON));
    }

    /**
     * list patientrightstype entities
     * List patientrightstype entities
     */
    async listPatientrightstype(requestParameters: ListPatientrightstypeRequest): Promise<Array<EntPatientrightstype>> {
        const response = await this.listPatientrightstypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * update abilitypatientrights by ID
     * Update a abilitypatientrights entity by ID
     */
    async updateAbilitypatientrightsRaw(requestParameters: UpdateAbilitypatientrightsRequest): Promise<runtime.ApiResponse<EntAbilitypatientrights>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAbilitypatientrights.');
        }

        if (requestParameters.abilitypatientrights === null || requestParameters.abilitypatientrights === undefined) {
            throw new runtime.RequiredError('abilitypatientrights','Required parameter requestParameters.abilitypatientrights was null or undefined when calling updateAbilitypatientrights.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/abilitypatientrightss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntAbilitypatientrightsToJSON(requestParameters.abilitypatientrights),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAbilitypatientrightsFromJSON(jsonValue));
    }

    /**
     * update abilitypatientrights by ID
     * Update a abilitypatientrights entity by ID
     */
    async updateAbilitypatientrights(requestParameters: UpdateAbilitypatientrightsRequest): Promise<EntAbilitypatientrights> {
        const response = await this.updateAbilitypatientrightsRaw(requestParameters);
        return await response.value();
    }

    /**
     * update insurance by ID
     * Update a insurance entity by ID
     */
    async updateInsuranceRaw(requestParameters: UpdateInsuranceRequest): Promise<runtime.ApiResponse<EntInsurance>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateInsurance.');
        }

        if (requestParameters.insurance === null || requestParameters.insurance === undefined) {
            throw new runtime.RequiredError('insurance','Required parameter requestParameters.insurance was null or undefined when calling updateInsurance.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/insurances/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntInsuranceToJSON(requestParameters.insurance),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntInsuranceFromJSON(jsonValue));
    }

    /**
     * update insurance by ID
     * Update a insurance entity by ID
     */
    async updateInsurance(requestParameters: UpdateInsuranceRequest): Promise<EntInsurance> {
        const response = await this.updateInsuranceRaw(requestParameters);
        return await response.value();
    }

    /**
     * update medicalrecordstaff by ID
     * Update a medicalrecordstaff entity by ID
     */
    async updateMedicalrecordstaffRaw(requestParameters: UpdateMedicalrecordstaffRequest): Promise<runtime.ApiResponse<EntMedicalrecordstaff>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateMedicalrecordstaff.');
        }

        if (requestParameters.medicalrecordstaff === null || requestParameters.medicalrecordstaff === undefined) {
            throw new runtime.RequiredError('medicalrecordstaff','Required parameter requestParameters.medicalrecordstaff was null or undefined when calling updateMedicalrecordstaff.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/medicalrecordstaffs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntMedicalrecordstaffToJSON(requestParameters.medicalrecordstaff),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMedicalrecordstaffFromJSON(jsonValue));
    }

    /**
     * update medicalrecordstaff by ID
     * Update a medicalrecordstaff entity by ID
     */
    async updateMedicalrecordstaff(requestParameters: UpdateMedicalrecordstaffRequest): Promise<EntMedicalrecordstaff> {
        const response = await this.updateMedicalrecordstaffRaw(requestParameters);
        return await response.value();
    }

    /**
     * update patientrecord by ID
     * Update a patientrecord entity by ID
     */
    async updatePatientrecordRaw(requestParameters: UpdatePatientrecordRequest): Promise<runtime.ApiResponse<EntPatientrecord>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePatientrecord.');
        }

        if (requestParameters.patientrecord === null || requestParameters.patientrecord === undefined) {
            throw new runtime.RequiredError('patientrecord','Required parameter requestParameters.patientrecord was null or undefined when calling updatePatientrecord.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patientrecords/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntPatientrecordToJSON(requestParameters.patientrecord),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientrecordFromJSON(jsonValue));
    }

    /**
     * update patientrecord by ID
     * Update a patientrecord entity by ID
     */
    async updatePatientrecord(requestParameters: UpdatePatientrecordRequest): Promise<EntPatientrecord> {
        const response = await this.updatePatientrecordRaw(requestParameters);
        return await response.value();
    }

    /**
     * update patientrightstype by ID
     * Update a patientrightstype entity by ID
     */
    async updatePatientrightstypeRaw(requestParameters: UpdatePatientrightstypeRequest): Promise<runtime.ApiResponse<EntPatientrightstype>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePatientrightstype.');
        }

        if (requestParameters.patientrightstype === null || requestParameters.patientrightstype === undefined) {
            throw new runtime.RequiredError('patientrightstype','Required parameter requestParameters.patientrightstype was null or undefined when calling updatePatientrightstype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patientrightstypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntPatientrightstypeToJSON(requestParameters.patientrightstype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientrightstypeFromJSON(jsonValue));
    }

    /**
     * update patientrightstype by ID
     * Update a patientrightstype entity by ID
     */
    async updatePatientrightstype(requestParameters: UpdatePatientrightstypeRequest): Promise<EntPatientrightstype> {
        const response = await this.updatePatientrightstypeRaw(requestParameters);
        return await response.value();
    }

}
